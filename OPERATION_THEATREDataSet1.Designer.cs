//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace WindowsFormsApplication1 {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("OPERATION_THEATREDataSet1")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class OPERATION_THEATREDataSet1 : global::System.Data.DataSet {
        
        private BILLING_DETAILSDataTable tableBILLING_DETAILS;
        
        private DOCTOR_DETAILSDataTable tableDOCTOR_DETAILS;
        
        private PATIENT_DETAILSDataTable tablePATIENT_DETAILS;
        
        private PATIENTDETAILSDataTable tablePATIENTDETAILS;
        
        private POST_OPERATIONDataTable tablePOST_OPERATION;
        
        private PRE_OPERATIONDataTable tablePRE_OPERATION;
        
        private STAFF_DETAILSDataTable tableSTAFF_DETAILS;
        
        private global::System.Data.DataRelation relationFK__BILLING_D__PATIE__28ED12D1;
        
        private global::System.Data.DataRelation relationFK__POST_OPER__PATIE__2704CA5F;
        
        private global::System.Data.DataRelation relationFK__PRE_OPERA__PATIE__251C81ED;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public OPERATION_THEATREDataSet1() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected OPERATION_THEATREDataSet1(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["BILLING_DETAILS"] != null)) {
                    base.Tables.Add(new BILLING_DETAILSDataTable(ds.Tables["BILLING_DETAILS"]));
                }
                if ((ds.Tables["DOCTOR_DETAILS"] != null)) {
                    base.Tables.Add(new DOCTOR_DETAILSDataTable(ds.Tables["DOCTOR_DETAILS"]));
                }
                if ((ds.Tables["PATIENT_DETAILS"] != null)) {
                    base.Tables.Add(new PATIENT_DETAILSDataTable(ds.Tables["PATIENT_DETAILS"]));
                }
                if ((ds.Tables["PATIENTDETAILS"] != null)) {
                    base.Tables.Add(new PATIENTDETAILSDataTable(ds.Tables["PATIENTDETAILS"]));
                }
                if ((ds.Tables["POST_OPERATION"] != null)) {
                    base.Tables.Add(new POST_OPERATIONDataTable(ds.Tables["POST_OPERATION"]));
                }
                if ((ds.Tables["PRE_OPERATION"] != null)) {
                    base.Tables.Add(new PRE_OPERATIONDataTable(ds.Tables["PRE_OPERATION"]));
                }
                if ((ds.Tables["STAFF_DETAILS"] != null)) {
                    base.Tables.Add(new STAFF_DETAILSDataTable(ds.Tables["STAFF_DETAILS"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BILLING_DETAILSDataTable BILLING_DETAILS {
            get {
                return this.tableBILLING_DETAILS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DOCTOR_DETAILSDataTable DOCTOR_DETAILS {
            get {
                return this.tableDOCTOR_DETAILS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PATIENT_DETAILSDataTable PATIENT_DETAILS {
            get {
                return this.tablePATIENT_DETAILS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PATIENTDETAILSDataTable PATIENTDETAILS {
            get {
                return this.tablePATIENTDETAILS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public POST_OPERATIONDataTable POST_OPERATION {
            get {
                return this.tablePOST_OPERATION;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PRE_OPERATIONDataTable PRE_OPERATION {
            get {
                return this.tablePRE_OPERATION;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public STAFF_DETAILSDataTable STAFF_DETAILS {
            get {
                return this.tableSTAFF_DETAILS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            OPERATION_THEATREDataSet1 cln = ((OPERATION_THEATREDataSet1)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["BILLING_DETAILS"] != null)) {
                    base.Tables.Add(new BILLING_DETAILSDataTable(ds.Tables["BILLING_DETAILS"]));
                }
                if ((ds.Tables["DOCTOR_DETAILS"] != null)) {
                    base.Tables.Add(new DOCTOR_DETAILSDataTable(ds.Tables["DOCTOR_DETAILS"]));
                }
                if ((ds.Tables["PATIENT_DETAILS"] != null)) {
                    base.Tables.Add(new PATIENT_DETAILSDataTable(ds.Tables["PATIENT_DETAILS"]));
                }
                if ((ds.Tables["PATIENTDETAILS"] != null)) {
                    base.Tables.Add(new PATIENTDETAILSDataTable(ds.Tables["PATIENTDETAILS"]));
                }
                if ((ds.Tables["POST_OPERATION"] != null)) {
                    base.Tables.Add(new POST_OPERATIONDataTable(ds.Tables["POST_OPERATION"]));
                }
                if ((ds.Tables["PRE_OPERATION"] != null)) {
                    base.Tables.Add(new PRE_OPERATIONDataTable(ds.Tables["PRE_OPERATION"]));
                }
                if ((ds.Tables["STAFF_DETAILS"] != null)) {
                    base.Tables.Add(new STAFF_DETAILSDataTable(ds.Tables["STAFF_DETAILS"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableBILLING_DETAILS = ((BILLING_DETAILSDataTable)(base.Tables["BILLING_DETAILS"]));
            if ((initTable == true)) {
                if ((this.tableBILLING_DETAILS != null)) {
                    this.tableBILLING_DETAILS.InitVars();
                }
            }
            this.tableDOCTOR_DETAILS = ((DOCTOR_DETAILSDataTable)(base.Tables["DOCTOR_DETAILS"]));
            if ((initTable == true)) {
                if ((this.tableDOCTOR_DETAILS != null)) {
                    this.tableDOCTOR_DETAILS.InitVars();
                }
            }
            this.tablePATIENT_DETAILS = ((PATIENT_DETAILSDataTable)(base.Tables["PATIENT_DETAILS"]));
            if ((initTable == true)) {
                if ((this.tablePATIENT_DETAILS != null)) {
                    this.tablePATIENT_DETAILS.InitVars();
                }
            }
            this.tablePATIENTDETAILS = ((PATIENTDETAILSDataTable)(base.Tables["PATIENTDETAILS"]));
            if ((initTable == true)) {
                if ((this.tablePATIENTDETAILS != null)) {
                    this.tablePATIENTDETAILS.InitVars();
                }
            }
            this.tablePOST_OPERATION = ((POST_OPERATIONDataTable)(base.Tables["POST_OPERATION"]));
            if ((initTable == true)) {
                if ((this.tablePOST_OPERATION != null)) {
                    this.tablePOST_OPERATION.InitVars();
                }
            }
            this.tablePRE_OPERATION = ((PRE_OPERATIONDataTable)(base.Tables["PRE_OPERATION"]));
            if ((initTable == true)) {
                if ((this.tablePRE_OPERATION != null)) {
                    this.tablePRE_OPERATION.InitVars();
                }
            }
            this.tableSTAFF_DETAILS = ((STAFF_DETAILSDataTable)(base.Tables["STAFF_DETAILS"]));
            if ((initTable == true)) {
                if ((this.tableSTAFF_DETAILS != null)) {
                    this.tableSTAFF_DETAILS.InitVars();
                }
            }
            this.relationFK__BILLING_D__PATIE__28ED12D1 = this.Relations["FK__BILLING_D__PATIE__28ED12D1"];
            this.relationFK__POST_OPER__PATIE__2704CA5F = this.Relations["FK__POST_OPER__PATIE__2704CA5F"];
            this.relationFK__PRE_OPERA__PATIE__251C81ED = this.Relations["FK__PRE_OPERA__PATIE__251C81ED"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "OPERATION_THEATREDataSet1";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/OPERATION_THEATREDataSet1.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableBILLING_DETAILS = new BILLING_DETAILSDataTable();
            base.Tables.Add(this.tableBILLING_DETAILS);
            this.tableDOCTOR_DETAILS = new DOCTOR_DETAILSDataTable();
            base.Tables.Add(this.tableDOCTOR_DETAILS);
            this.tablePATIENT_DETAILS = new PATIENT_DETAILSDataTable();
            base.Tables.Add(this.tablePATIENT_DETAILS);
            this.tablePATIENTDETAILS = new PATIENTDETAILSDataTable();
            base.Tables.Add(this.tablePATIENTDETAILS);
            this.tablePOST_OPERATION = new POST_OPERATIONDataTable();
            base.Tables.Add(this.tablePOST_OPERATION);
            this.tablePRE_OPERATION = new PRE_OPERATIONDataTable();
            base.Tables.Add(this.tablePRE_OPERATION);
            this.tableSTAFF_DETAILS = new STAFF_DETAILSDataTable();
            base.Tables.Add(this.tableSTAFF_DETAILS);
            this.relationFK__BILLING_D__PATIE__28ED12D1 = new global::System.Data.DataRelation("FK__BILLING_D__PATIE__28ED12D1", new global::System.Data.DataColumn[] {
                        this.tablePATIENT_DETAILS.PATIENT_IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableBILLING_DETAILS.PATIENT_IDColumn}, false);
            this.Relations.Add(this.relationFK__BILLING_D__PATIE__28ED12D1);
            this.relationFK__POST_OPER__PATIE__2704CA5F = new global::System.Data.DataRelation("FK__POST_OPER__PATIE__2704CA5F", new global::System.Data.DataColumn[] {
                        this.tablePATIENT_DETAILS.PATIENT_IDColumn}, new global::System.Data.DataColumn[] {
                        this.tablePOST_OPERATION.PATIENT_IDColumn}, false);
            this.Relations.Add(this.relationFK__POST_OPER__PATIE__2704CA5F);
            this.relationFK__PRE_OPERA__PATIE__251C81ED = new global::System.Data.DataRelation("FK__PRE_OPERA__PATIE__251C81ED", new global::System.Data.DataColumn[] {
                        this.tablePATIENT_DETAILS.PATIENT_IDColumn}, new global::System.Data.DataColumn[] {
                        this.tablePRE_OPERATION.PATIENT_IDColumn}, false);
            this.Relations.Add(this.relationFK__PRE_OPERA__PATIE__251C81ED);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBILLING_DETAILS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDOCTOR_DETAILS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePATIENT_DETAILS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePATIENTDETAILS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePOST_OPERATION() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePRE_OPERATION() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSTAFF_DETAILS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            OPERATION_THEATREDataSet1 ds = new OPERATION_THEATREDataSet1();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void BILLING_DETAILSRowChangeEventHandler(object sender, BILLING_DETAILSRowChangeEvent e);
        
        public delegate void DOCTOR_DETAILSRowChangeEventHandler(object sender, DOCTOR_DETAILSRowChangeEvent e);
        
        public delegate void PATIENT_DETAILSRowChangeEventHandler(object sender, PATIENT_DETAILSRowChangeEvent e);
        
        public delegate void PATIENTDETAILSRowChangeEventHandler(object sender, PATIENTDETAILSRowChangeEvent e);
        
        public delegate void POST_OPERATIONRowChangeEventHandler(object sender, POST_OPERATIONRowChangeEvent e);
        
        public delegate void PRE_OPERATIONRowChangeEventHandler(object sender, PRE_OPERATIONRowChangeEvent e);
        
        public delegate void STAFF_DETAILSRowChangeEventHandler(object sender, STAFF_DETAILSRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BILLING_DETAILSDataTable : global::System.Data.TypedTableBase<BILLING_DETAILSRow> {
            
            private global::System.Data.DataColumn columnPATIENT_ID;
            
            private global::System.Data.DataColumn columnBLOOD_UNITS_USED;
            
            private global::System.Data.DataColumn columnMEDICINE_CHARGES;
            
            private global::System.Data.DataColumn columnDOCTOR_FEE;
            
            private global::System.Data.DataColumn columnECG_CHARGES;
            
            private global::System.Data.DataColumn columnBLOOD_TEST_CHARGES;
            
            private global::System.Data.DataColumn columnXRAY_CHARGES;
            
            private global::System.Data.DataColumn columnBODY_CHECKUP_CHARGES;
            
            private global::System.Data.DataColumn columnMISCELLANEOUS_CHARGES;
            
            private global::System.Data.DataColumn columnNO_OF_DAYS_TREATED;
            
            private global::System.Data.DataColumn columnTotal_Amount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BILLING_DETAILSDataTable() {
                this.TableName = "BILLING_DETAILS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BILLING_DETAILSDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BILLING_DETAILSDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PATIENT_IDColumn {
                get {
                    return this.columnPATIENT_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BLOOD_UNITS_USEDColumn {
                get {
                    return this.columnBLOOD_UNITS_USED;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MEDICINE_CHARGESColumn {
                get {
                    return this.columnMEDICINE_CHARGES;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOCTOR_FEEColumn {
                get {
                    return this.columnDOCTOR_FEE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ECG_CHARGESColumn {
                get {
                    return this.columnECG_CHARGES;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BLOOD_TEST_CHARGESColumn {
                get {
                    return this.columnBLOOD_TEST_CHARGES;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn XRAY_CHARGESColumn {
                get {
                    return this.columnXRAY_CHARGES;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BODY_CHECKUP_CHARGESColumn {
                get {
                    return this.columnBODY_CHECKUP_CHARGES;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MISCELLANEOUS_CHARGESColumn {
                get {
                    return this.columnMISCELLANEOUS_CHARGES;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NO_OF_DAYS_TREATEDColumn {
                get {
                    return this.columnNO_OF_DAYS_TREATED;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Total_AmountColumn {
                get {
                    return this.columnTotal_Amount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BILLING_DETAILSRow this[int index] {
                get {
                    return ((BILLING_DETAILSRow)(this.Rows[index]));
                }
            }
            
            public event BILLING_DETAILSRowChangeEventHandler BILLING_DETAILSRowChanging;
            
            public event BILLING_DETAILSRowChangeEventHandler BILLING_DETAILSRowChanged;
            
            public event BILLING_DETAILSRowChangeEventHandler BILLING_DETAILSRowDeleting;
            
            public event BILLING_DETAILSRowChangeEventHandler BILLING_DETAILSRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBILLING_DETAILSRow(BILLING_DETAILSRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BILLING_DETAILSRow AddBILLING_DETAILSRow(PATIENT_DETAILSRow parentPATIENT_DETAILSRowByFK__BILLING_D__PATIE__28ED12D1, int BLOOD_UNITS_USED, decimal MEDICINE_CHARGES, decimal DOCTOR_FEE, decimal ECG_CHARGES, decimal BLOOD_TEST_CHARGES, decimal XRAY_CHARGES, decimal BODY_CHECKUP_CHARGES, decimal MISCELLANEOUS_CHARGES, int NO_OF_DAYS_TREATED, decimal Total_Amount) {
                BILLING_DETAILSRow rowBILLING_DETAILSRow = ((BILLING_DETAILSRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        BLOOD_UNITS_USED,
                        MEDICINE_CHARGES,
                        DOCTOR_FEE,
                        ECG_CHARGES,
                        BLOOD_TEST_CHARGES,
                        XRAY_CHARGES,
                        BODY_CHECKUP_CHARGES,
                        MISCELLANEOUS_CHARGES,
                        NO_OF_DAYS_TREATED,
                        Total_Amount};
                if ((parentPATIENT_DETAILSRowByFK__BILLING_D__PATIE__28ED12D1 != null)) {
                    columnValuesArray[0] = parentPATIENT_DETAILSRowByFK__BILLING_D__PATIE__28ED12D1[0];
                }
                rowBILLING_DETAILSRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowBILLING_DETAILSRow);
                return rowBILLING_DETAILSRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                BILLING_DETAILSDataTable cln = ((BILLING_DETAILSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new BILLING_DETAILSDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPATIENT_ID = base.Columns["PATIENT_ID"];
                this.columnBLOOD_UNITS_USED = base.Columns["BLOOD_UNITS_USED"];
                this.columnMEDICINE_CHARGES = base.Columns["MEDICINE_CHARGES"];
                this.columnDOCTOR_FEE = base.Columns["DOCTOR_FEE"];
                this.columnECG_CHARGES = base.Columns["ECG_CHARGES"];
                this.columnBLOOD_TEST_CHARGES = base.Columns["BLOOD_TEST_CHARGES"];
                this.columnXRAY_CHARGES = base.Columns["XRAY_CHARGES"];
                this.columnBODY_CHECKUP_CHARGES = base.Columns["BODY_CHECKUP_CHARGES"];
                this.columnMISCELLANEOUS_CHARGES = base.Columns["MISCELLANEOUS_CHARGES"];
                this.columnNO_OF_DAYS_TREATED = base.Columns["NO_OF_DAYS_TREATED"];
                this.columnTotal_Amount = base.Columns["Total_Amount"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPATIENT_ID = new global::System.Data.DataColumn("PATIENT_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPATIENT_ID);
                this.columnBLOOD_UNITS_USED = new global::System.Data.DataColumn("BLOOD_UNITS_USED", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBLOOD_UNITS_USED);
                this.columnMEDICINE_CHARGES = new global::System.Data.DataColumn("MEDICINE_CHARGES", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMEDICINE_CHARGES);
                this.columnDOCTOR_FEE = new global::System.Data.DataColumn("DOCTOR_FEE", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOCTOR_FEE);
                this.columnECG_CHARGES = new global::System.Data.DataColumn("ECG_CHARGES", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnECG_CHARGES);
                this.columnBLOOD_TEST_CHARGES = new global::System.Data.DataColumn("BLOOD_TEST_CHARGES", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBLOOD_TEST_CHARGES);
                this.columnXRAY_CHARGES = new global::System.Data.DataColumn("XRAY_CHARGES", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnXRAY_CHARGES);
                this.columnBODY_CHECKUP_CHARGES = new global::System.Data.DataColumn("BODY_CHECKUP_CHARGES", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBODY_CHECKUP_CHARGES);
                this.columnMISCELLANEOUS_CHARGES = new global::System.Data.DataColumn("MISCELLANEOUS_CHARGES", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMISCELLANEOUS_CHARGES);
                this.columnNO_OF_DAYS_TREATED = new global::System.Data.DataColumn("NO_OF_DAYS_TREATED", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNO_OF_DAYS_TREATED);
                this.columnTotal_Amount = new global::System.Data.DataColumn("Total_Amount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotal_Amount);
                this.columnPATIENT_ID.AllowDBNull = false;
                this.columnNO_OF_DAYS_TREATED.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BILLING_DETAILSRow NewBILLING_DETAILSRow() {
                return ((BILLING_DETAILSRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new BILLING_DETAILSRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(BILLING_DETAILSRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BILLING_DETAILSRowChanged != null)) {
                    this.BILLING_DETAILSRowChanged(this, new BILLING_DETAILSRowChangeEvent(((BILLING_DETAILSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BILLING_DETAILSRowChanging != null)) {
                    this.BILLING_DETAILSRowChanging(this, new BILLING_DETAILSRowChangeEvent(((BILLING_DETAILSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BILLING_DETAILSRowDeleted != null)) {
                    this.BILLING_DETAILSRowDeleted(this, new BILLING_DETAILSRowChangeEvent(((BILLING_DETAILSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BILLING_DETAILSRowDeleting != null)) {
                    this.BILLING_DETAILSRowDeleting(this, new BILLING_DETAILSRowChangeEvent(((BILLING_DETAILSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBILLING_DETAILSRow(BILLING_DETAILSRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                OPERATION_THEATREDataSet1 ds = new OPERATION_THEATREDataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BILLING_DETAILSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DOCTOR_DETAILSDataTable : global::System.Data.TypedTableBase<DOCTOR_DETAILSRow> {
            
            private global::System.Data.DataColumn columnDOC_ID;
            
            private global::System.Data.DataColumn columnDOC_NAME;
            
            private global::System.Data.DataColumn columnDOC_SPECIALIZATION;
            
            private global::System.Data.DataColumn columnDOC_CONTACT_NO;
            
            private global::System.Data.DataColumn columnDOC_JOIN_DATE;
            
            private global::System.Data.DataColumn columnDOC_SALARY;
            
            private global::System.Data.DataColumn columnDOC_AVAILABLITY;
            
            private global::System.Data.DataColumn columnDOC_EXPERIENCE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DOCTOR_DETAILSDataTable() {
                this.TableName = "DOCTOR_DETAILS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DOCTOR_DETAILSDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DOCTOR_DETAILSDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOC_IDColumn {
                get {
                    return this.columnDOC_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOC_NAMEColumn {
                get {
                    return this.columnDOC_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOC_SPECIALIZATIONColumn {
                get {
                    return this.columnDOC_SPECIALIZATION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOC_CONTACT_NOColumn {
                get {
                    return this.columnDOC_CONTACT_NO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOC_JOIN_DATEColumn {
                get {
                    return this.columnDOC_JOIN_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOC_SALARYColumn {
                get {
                    return this.columnDOC_SALARY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOC_AVAILABLITYColumn {
                get {
                    return this.columnDOC_AVAILABLITY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOC_EXPERIENCEColumn {
                get {
                    return this.columnDOC_EXPERIENCE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DOCTOR_DETAILSRow this[int index] {
                get {
                    return ((DOCTOR_DETAILSRow)(this.Rows[index]));
                }
            }
            
            public event DOCTOR_DETAILSRowChangeEventHandler DOCTOR_DETAILSRowChanging;
            
            public event DOCTOR_DETAILSRowChangeEventHandler DOCTOR_DETAILSRowChanged;
            
            public event DOCTOR_DETAILSRowChangeEventHandler DOCTOR_DETAILSRowDeleting;
            
            public event DOCTOR_DETAILSRowChangeEventHandler DOCTOR_DETAILSRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDOCTOR_DETAILSRow(DOCTOR_DETAILSRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DOCTOR_DETAILSRow AddDOCTOR_DETAILSRow(int DOC_ID, string DOC_NAME, string DOC_SPECIALIZATION, string DOC_CONTACT_NO, System.DateTime DOC_JOIN_DATE, decimal DOC_SALARY, string DOC_AVAILABLITY, string DOC_EXPERIENCE) {
                DOCTOR_DETAILSRow rowDOCTOR_DETAILSRow = ((DOCTOR_DETAILSRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        DOC_ID,
                        DOC_NAME,
                        DOC_SPECIALIZATION,
                        DOC_CONTACT_NO,
                        DOC_JOIN_DATE,
                        DOC_SALARY,
                        DOC_AVAILABLITY,
                        DOC_EXPERIENCE};
                rowDOCTOR_DETAILSRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDOCTOR_DETAILSRow);
                return rowDOCTOR_DETAILSRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DOCTOR_DETAILSRow FindByDOC_ID(int DOC_ID) {
                return ((DOCTOR_DETAILSRow)(this.Rows.Find(new object[] {
                            DOC_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DOCTOR_DETAILSDataTable cln = ((DOCTOR_DETAILSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DOCTOR_DETAILSDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDOC_ID = base.Columns["DOC_ID"];
                this.columnDOC_NAME = base.Columns["DOC_NAME"];
                this.columnDOC_SPECIALIZATION = base.Columns["DOC_SPECIALIZATION"];
                this.columnDOC_CONTACT_NO = base.Columns["DOC_CONTACT_NO"];
                this.columnDOC_JOIN_DATE = base.Columns["DOC_JOIN_DATE"];
                this.columnDOC_SALARY = base.Columns["DOC_SALARY"];
                this.columnDOC_AVAILABLITY = base.Columns["DOC_AVAILABLITY"];
                this.columnDOC_EXPERIENCE = base.Columns["DOC_EXPERIENCE"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDOC_ID = new global::System.Data.DataColumn("DOC_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOC_ID);
                this.columnDOC_NAME = new global::System.Data.DataColumn("DOC_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOC_NAME);
                this.columnDOC_SPECIALIZATION = new global::System.Data.DataColumn("DOC_SPECIALIZATION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOC_SPECIALIZATION);
                this.columnDOC_CONTACT_NO = new global::System.Data.DataColumn("DOC_CONTACT_NO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOC_CONTACT_NO);
                this.columnDOC_JOIN_DATE = new global::System.Data.DataColumn("DOC_JOIN_DATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOC_JOIN_DATE);
                this.columnDOC_SALARY = new global::System.Data.DataColumn("DOC_SALARY", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOC_SALARY);
                this.columnDOC_AVAILABLITY = new global::System.Data.DataColumn("DOC_AVAILABLITY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOC_AVAILABLITY);
                this.columnDOC_EXPERIENCE = new global::System.Data.DataColumn("DOC_EXPERIENCE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOC_EXPERIENCE);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnDOC_ID}, true));
                this.columnDOC_ID.AllowDBNull = false;
                this.columnDOC_ID.Unique = true;
                this.columnDOC_NAME.AllowDBNull = false;
                this.columnDOC_NAME.MaxLength = 50;
                this.columnDOC_SPECIALIZATION.AllowDBNull = false;
                this.columnDOC_SPECIALIZATION.MaxLength = 50;
                this.columnDOC_CONTACT_NO.AllowDBNull = false;
                this.columnDOC_CONTACT_NO.MaxLength = 50;
                this.columnDOC_JOIN_DATE.AllowDBNull = false;
                this.columnDOC_SALARY.AllowDBNull = false;
                this.columnDOC_AVAILABLITY.AllowDBNull = false;
                this.columnDOC_AVAILABLITY.MaxLength = 20;
                this.columnDOC_EXPERIENCE.AllowDBNull = false;
                this.columnDOC_EXPERIENCE.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DOCTOR_DETAILSRow NewDOCTOR_DETAILSRow() {
                return ((DOCTOR_DETAILSRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DOCTOR_DETAILSRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DOCTOR_DETAILSRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DOCTOR_DETAILSRowChanged != null)) {
                    this.DOCTOR_DETAILSRowChanged(this, new DOCTOR_DETAILSRowChangeEvent(((DOCTOR_DETAILSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DOCTOR_DETAILSRowChanging != null)) {
                    this.DOCTOR_DETAILSRowChanging(this, new DOCTOR_DETAILSRowChangeEvent(((DOCTOR_DETAILSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DOCTOR_DETAILSRowDeleted != null)) {
                    this.DOCTOR_DETAILSRowDeleted(this, new DOCTOR_DETAILSRowChangeEvent(((DOCTOR_DETAILSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DOCTOR_DETAILSRowDeleting != null)) {
                    this.DOCTOR_DETAILSRowDeleting(this, new DOCTOR_DETAILSRowChangeEvent(((DOCTOR_DETAILSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDOCTOR_DETAILSRow(DOCTOR_DETAILSRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                OPERATION_THEATREDataSet1 ds = new OPERATION_THEATREDataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DOCTOR_DETAILSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PATIENT_DETAILSDataTable : global::System.Data.TypedTableBase<PATIENT_DETAILSRow> {
            
            private global::System.Data.DataColumn columnPATIENT_ID;
            
            private global::System.Data.DataColumn columnPATIENT_NAME;
            
            private global::System.Data.DataColumn columnGENDER;
            
            private global::System.Data.DataColumn columnAGE;
            
            private global::System.Data.DataColumn columnADDRESS;
            
            private global::System.Data.DataColumn columnPHONE_NO;
            
            private global::System.Data.DataColumn columnADMIT_DATE;
            
            private global::System.Data.DataColumn columnDISCHARGE_DATE;
            
            private global::System.Data.DataColumn columnWARD_TYPE;
            
            private global::System.Data.DataColumn columnBED_NO;
            
            private global::System.Data.DataColumn columnNO_OF_DAYS;
            
            private global::System.Data.DataColumn columnDISEASE_TYPE;
            
            private global::System.Data.DataColumn columnDOCTOR_ID;
            
            private global::System.Data.DataColumn columnDOCTOR_NAME;
            
            private global::System.Data.DataColumn columnOPERATION_DATE;
            
            private global::System.Data.DataColumn columnOPERATIONTHEATRE_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PATIENT_DETAILSDataTable() {
                this.TableName = "PATIENT_DETAILS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PATIENT_DETAILSDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PATIENT_DETAILSDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PATIENT_IDColumn {
                get {
                    return this.columnPATIENT_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PATIENT_NAMEColumn {
                get {
                    return this.columnPATIENT_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GENDERColumn {
                get {
                    return this.columnGENDER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AGEColumn {
                get {
                    return this.columnAGE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ADDRESSColumn {
                get {
                    return this.columnADDRESS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PHONE_NOColumn {
                get {
                    return this.columnPHONE_NO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ADMIT_DATEColumn {
                get {
                    return this.columnADMIT_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DISCHARGE_DATEColumn {
                get {
                    return this.columnDISCHARGE_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WARD_TYPEColumn {
                get {
                    return this.columnWARD_TYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BED_NOColumn {
                get {
                    return this.columnBED_NO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NO_OF_DAYSColumn {
                get {
                    return this.columnNO_OF_DAYS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DISEASE_TYPEColumn {
                get {
                    return this.columnDISEASE_TYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOCTOR_IDColumn {
                get {
                    return this.columnDOCTOR_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOCTOR_NAMEColumn {
                get {
                    return this.columnDOCTOR_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OPERATION_DATEColumn {
                get {
                    return this.columnOPERATION_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OPERATIONTHEATRE_IDColumn {
                get {
                    return this.columnOPERATIONTHEATRE_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PATIENT_DETAILSRow this[int index] {
                get {
                    return ((PATIENT_DETAILSRow)(this.Rows[index]));
                }
            }
            
            public event PATIENT_DETAILSRowChangeEventHandler PATIENT_DETAILSRowChanging;
            
            public event PATIENT_DETAILSRowChangeEventHandler PATIENT_DETAILSRowChanged;
            
            public event PATIENT_DETAILSRowChangeEventHandler PATIENT_DETAILSRowDeleting;
            
            public event PATIENT_DETAILSRowChangeEventHandler PATIENT_DETAILSRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPATIENT_DETAILSRow(PATIENT_DETAILSRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PATIENT_DETAILSRow AddPATIENT_DETAILSRow(string PATIENT_NAME, string GENDER, int AGE, string ADDRESS, string PHONE_NO, System.DateTime ADMIT_DATE, System.DateTime DISCHARGE_DATE, string WARD_TYPE, int BED_NO, int NO_OF_DAYS, string DISEASE_TYPE, int DOCTOR_ID, string DOCTOR_NAME, System.DateTime OPERATION_DATE, int OPERATIONTHEATRE_ID) {
                PATIENT_DETAILSRow rowPATIENT_DETAILSRow = ((PATIENT_DETAILSRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        PATIENT_NAME,
                        GENDER,
                        AGE,
                        ADDRESS,
                        PHONE_NO,
                        ADMIT_DATE,
                        DISCHARGE_DATE,
                        WARD_TYPE,
                        BED_NO,
                        NO_OF_DAYS,
                        DISEASE_TYPE,
                        DOCTOR_ID,
                        DOCTOR_NAME,
                        OPERATION_DATE,
                        OPERATIONTHEATRE_ID};
                rowPATIENT_DETAILSRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPATIENT_DETAILSRow);
                return rowPATIENT_DETAILSRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PATIENT_DETAILSRow FindByPATIENT_ID(int PATIENT_ID) {
                return ((PATIENT_DETAILSRow)(this.Rows.Find(new object[] {
                            PATIENT_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PATIENT_DETAILSDataTable cln = ((PATIENT_DETAILSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PATIENT_DETAILSDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPATIENT_ID = base.Columns["PATIENT_ID"];
                this.columnPATIENT_NAME = base.Columns["PATIENT_NAME"];
                this.columnGENDER = base.Columns["GENDER"];
                this.columnAGE = base.Columns["AGE"];
                this.columnADDRESS = base.Columns["ADDRESS"];
                this.columnPHONE_NO = base.Columns["PHONE_NO"];
                this.columnADMIT_DATE = base.Columns["ADMIT_DATE"];
                this.columnDISCHARGE_DATE = base.Columns["DISCHARGE_DATE"];
                this.columnWARD_TYPE = base.Columns["WARD_TYPE"];
                this.columnBED_NO = base.Columns["BED_NO"];
                this.columnNO_OF_DAYS = base.Columns["NO_OF_DAYS"];
                this.columnDISEASE_TYPE = base.Columns["DISEASE_TYPE"];
                this.columnDOCTOR_ID = base.Columns["DOCTOR_ID"];
                this.columnDOCTOR_NAME = base.Columns["DOCTOR_NAME"];
                this.columnOPERATION_DATE = base.Columns["OPERATION_DATE"];
                this.columnOPERATIONTHEATRE_ID = base.Columns["OPERATIONTHEATRE_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPATIENT_ID = new global::System.Data.DataColumn("PATIENT_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPATIENT_ID);
                this.columnPATIENT_NAME = new global::System.Data.DataColumn("PATIENT_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPATIENT_NAME);
                this.columnGENDER = new global::System.Data.DataColumn("GENDER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGENDER);
                this.columnAGE = new global::System.Data.DataColumn("AGE", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAGE);
                this.columnADDRESS = new global::System.Data.DataColumn("ADDRESS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnADDRESS);
                this.columnPHONE_NO = new global::System.Data.DataColumn("PHONE_NO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPHONE_NO);
                this.columnADMIT_DATE = new global::System.Data.DataColumn("ADMIT_DATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnADMIT_DATE);
                this.columnDISCHARGE_DATE = new global::System.Data.DataColumn("DISCHARGE_DATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDISCHARGE_DATE);
                this.columnWARD_TYPE = new global::System.Data.DataColumn("WARD_TYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWARD_TYPE);
                this.columnBED_NO = new global::System.Data.DataColumn("BED_NO", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBED_NO);
                this.columnNO_OF_DAYS = new global::System.Data.DataColumn("NO_OF_DAYS", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNO_OF_DAYS);
                this.columnDISEASE_TYPE = new global::System.Data.DataColumn("DISEASE_TYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDISEASE_TYPE);
                this.columnDOCTOR_ID = new global::System.Data.DataColumn("DOCTOR_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOCTOR_ID);
                this.columnDOCTOR_NAME = new global::System.Data.DataColumn("DOCTOR_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOCTOR_NAME);
                this.columnOPERATION_DATE = new global::System.Data.DataColumn("OPERATION_DATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOPERATION_DATE);
                this.columnOPERATIONTHEATRE_ID = new global::System.Data.DataColumn("OPERATIONTHEATRE_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOPERATIONTHEATRE_ID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnPATIENT_ID}, true));
                this.columnPATIENT_ID.AutoIncrement = true;
                this.columnPATIENT_ID.AutoIncrementSeed = -1;
                this.columnPATIENT_ID.AutoIncrementStep = -1;
                this.columnPATIENT_ID.AllowDBNull = false;
                this.columnPATIENT_ID.ReadOnly = true;
                this.columnPATIENT_ID.Unique = true;
                this.columnPATIENT_NAME.AllowDBNull = false;
                this.columnPATIENT_NAME.MaxLength = 50;
                this.columnGENDER.AllowDBNull = false;
                this.columnGENDER.MaxLength = 8;
                this.columnAGE.AllowDBNull = false;
                this.columnADDRESS.AllowDBNull = false;
                this.columnADDRESS.MaxLength = 50;
                this.columnPHONE_NO.MaxLength = 50;
                this.columnADMIT_DATE.AllowDBNull = false;
                this.columnWARD_TYPE.AllowDBNull = false;
                this.columnWARD_TYPE.MaxLength = 50;
                this.columnBED_NO.AllowDBNull = false;
                this.columnNO_OF_DAYS.AllowDBNull = false;
                this.columnDISEASE_TYPE.AllowDBNull = false;
                this.columnDISEASE_TYPE.MaxLength = 50;
                this.columnDOCTOR_ID.AllowDBNull = false;
                this.columnDOCTOR_NAME.AllowDBNull = false;
                this.columnDOCTOR_NAME.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PATIENT_DETAILSRow NewPATIENT_DETAILSRow() {
                return ((PATIENT_DETAILSRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PATIENT_DETAILSRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PATIENT_DETAILSRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PATIENT_DETAILSRowChanged != null)) {
                    this.PATIENT_DETAILSRowChanged(this, new PATIENT_DETAILSRowChangeEvent(((PATIENT_DETAILSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PATIENT_DETAILSRowChanging != null)) {
                    this.PATIENT_DETAILSRowChanging(this, new PATIENT_DETAILSRowChangeEvent(((PATIENT_DETAILSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PATIENT_DETAILSRowDeleted != null)) {
                    this.PATIENT_DETAILSRowDeleted(this, new PATIENT_DETAILSRowChangeEvent(((PATIENT_DETAILSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PATIENT_DETAILSRowDeleting != null)) {
                    this.PATIENT_DETAILSRowDeleting(this, new PATIENT_DETAILSRowChangeEvent(((PATIENT_DETAILSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePATIENT_DETAILSRow(PATIENT_DETAILSRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                OPERATION_THEATREDataSet1 ds = new OPERATION_THEATREDataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PATIENT_DETAILSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PATIENTDETAILSDataTable : global::System.Data.TypedTableBase<PATIENTDETAILSRow> {
            
            private global::System.Data.DataColumn columnPATIENT_ID;
            
            private global::System.Data.DataColumn columnPATIENT_NAME;
            
            private global::System.Data.DataColumn columnGENDER;
            
            private global::System.Data.DataColumn columnAGE;
            
            private global::System.Data.DataColumn columnADDRESS;
            
            private global::System.Data.DataColumn columnPHONE_NO;
            
            private global::System.Data.DataColumn columnADMIT_DATE;
            
            private global::System.Data.DataColumn columnDISCHARGE_DATE;
            
            private global::System.Data.DataColumn columnWARD_TYPE;
            
            private global::System.Data.DataColumn columnBED_NO;
            
            private global::System.Data.DataColumn columnNO_OF_DAYS;
            
            private global::System.Data.DataColumn columnDISEASE_TYPE;
            
            private global::System.Data.DataColumn columnDOCTOR_ID;
            
            private global::System.Data.DataColumn columnDOCTOR_NAME;
            
            private global::System.Data.DataColumn columnOPERATION_DATE;
            
            private global::System.Data.DataColumn columnOPERATION_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PATIENTDETAILSDataTable() {
                this.TableName = "PATIENTDETAILS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PATIENTDETAILSDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PATIENTDETAILSDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PATIENT_IDColumn {
                get {
                    return this.columnPATIENT_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PATIENT_NAMEColumn {
                get {
                    return this.columnPATIENT_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GENDERColumn {
                get {
                    return this.columnGENDER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AGEColumn {
                get {
                    return this.columnAGE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ADDRESSColumn {
                get {
                    return this.columnADDRESS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PHONE_NOColumn {
                get {
                    return this.columnPHONE_NO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ADMIT_DATEColumn {
                get {
                    return this.columnADMIT_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DISCHARGE_DATEColumn {
                get {
                    return this.columnDISCHARGE_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WARD_TYPEColumn {
                get {
                    return this.columnWARD_TYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BED_NOColumn {
                get {
                    return this.columnBED_NO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NO_OF_DAYSColumn {
                get {
                    return this.columnNO_OF_DAYS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DISEASE_TYPEColumn {
                get {
                    return this.columnDISEASE_TYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOCTOR_IDColumn {
                get {
                    return this.columnDOCTOR_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOCTOR_NAMEColumn {
                get {
                    return this.columnDOCTOR_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OPERATION_DATEColumn {
                get {
                    return this.columnOPERATION_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OPERATION_IDColumn {
                get {
                    return this.columnOPERATION_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PATIENTDETAILSRow this[int index] {
                get {
                    return ((PATIENTDETAILSRow)(this.Rows[index]));
                }
            }
            
            public event PATIENTDETAILSRowChangeEventHandler PATIENTDETAILSRowChanging;
            
            public event PATIENTDETAILSRowChangeEventHandler PATIENTDETAILSRowChanged;
            
            public event PATIENTDETAILSRowChangeEventHandler PATIENTDETAILSRowDeleting;
            
            public event PATIENTDETAILSRowChangeEventHandler PATIENTDETAILSRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPATIENTDETAILSRow(PATIENTDETAILSRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PATIENTDETAILSRow AddPATIENTDETAILSRow(string PATIENT_NAME, string GENDER, int AGE, string ADDRESS, string PHONE_NO, System.DateTime ADMIT_DATE, System.DateTime DISCHARGE_DATE, string WARD_TYPE, int BED_NO, int NO_OF_DAYS, string DISEASE_TYPE, int DOCTOR_ID, string DOCTOR_NAME, System.DateTime OPERATION_DATE, int OPERATION_ID) {
                PATIENTDETAILSRow rowPATIENTDETAILSRow = ((PATIENTDETAILSRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        PATIENT_NAME,
                        GENDER,
                        AGE,
                        ADDRESS,
                        PHONE_NO,
                        ADMIT_DATE,
                        DISCHARGE_DATE,
                        WARD_TYPE,
                        BED_NO,
                        NO_OF_DAYS,
                        DISEASE_TYPE,
                        DOCTOR_ID,
                        DOCTOR_NAME,
                        OPERATION_DATE,
                        OPERATION_ID};
                rowPATIENTDETAILSRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPATIENTDETAILSRow);
                return rowPATIENTDETAILSRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PATIENTDETAILSRow FindByPATIENT_ID(int PATIENT_ID) {
                return ((PATIENTDETAILSRow)(this.Rows.Find(new object[] {
                            PATIENT_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PATIENTDETAILSDataTable cln = ((PATIENTDETAILSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PATIENTDETAILSDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPATIENT_ID = base.Columns["PATIENT_ID"];
                this.columnPATIENT_NAME = base.Columns["PATIENT_NAME"];
                this.columnGENDER = base.Columns["GENDER"];
                this.columnAGE = base.Columns["AGE"];
                this.columnADDRESS = base.Columns["ADDRESS"];
                this.columnPHONE_NO = base.Columns["PHONE_NO"];
                this.columnADMIT_DATE = base.Columns["ADMIT_DATE"];
                this.columnDISCHARGE_DATE = base.Columns["DISCHARGE_DATE"];
                this.columnWARD_TYPE = base.Columns["WARD_TYPE"];
                this.columnBED_NO = base.Columns["BED_NO"];
                this.columnNO_OF_DAYS = base.Columns["NO_OF_DAYS"];
                this.columnDISEASE_TYPE = base.Columns["DISEASE_TYPE"];
                this.columnDOCTOR_ID = base.Columns["DOCTOR_ID"];
                this.columnDOCTOR_NAME = base.Columns["DOCTOR_NAME"];
                this.columnOPERATION_DATE = base.Columns["OPERATION_DATE"];
                this.columnOPERATION_ID = base.Columns["OPERATION_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPATIENT_ID = new global::System.Data.DataColumn("PATIENT_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPATIENT_ID);
                this.columnPATIENT_NAME = new global::System.Data.DataColumn("PATIENT_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPATIENT_NAME);
                this.columnGENDER = new global::System.Data.DataColumn("GENDER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGENDER);
                this.columnAGE = new global::System.Data.DataColumn("AGE", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAGE);
                this.columnADDRESS = new global::System.Data.DataColumn("ADDRESS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnADDRESS);
                this.columnPHONE_NO = new global::System.Data.DataColumn("PHONE_NO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPHONE_NO);
                this.columnADMIT_DATE = new global::System.Data.DataColumn("ADMIT_DATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnADMIT_DATE);
                this.columnDISCHARGE_DATE = new global::System.Data.DataColumn("DISCHARGE_DATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDISCHARGE_DATE);
                this.columnWARD_TYPE = new global::System.Data.DataColumn("WARD_TYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWARD_TYPE);
                this.columnBED_NO = new global::System.Data.DataColumn("BED_NO", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBED_NO);
                this.columnNO_OF_DAYS = new global::System.Data.DataColumn("NO_OF_DAYS", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNO_OF_DAYS);
                this.columnDISEASE_TYPE = new global::System.Data.DataColumn("DISEASE_TYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDISEASE_TYPE);
                this.columnDOCTOR_ID = new global::System.Data.DataColumn("DOCTOR_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOCTOR_ID);
                this.columnDOCTOR_NAME = new global::System.Data.DataColumn("DOCTOR_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOCTOR_NAME);
                this.columnOPERATION_DATE = new global::System.Data.DataColumn("OPERATION_DATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOPERATION_DATE);
                this.columnOPERATION_ID = new global::System.Data.DataColumn("OPERATION_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOPERATION_ID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnPATIENT_ID}, true));
                this.columnPATIENT_ID.AutoIncrement = true;
                this.columnPATIENT_ID.AutoIncrementSeed = -1;
                this.columnPATIENT_ID.AutoIncrementStep = -1;
                this.columnPATIENT_ID.AllowDBNull = false;
                this.columnPATIENT_ID.ReadOnly = true;
                this.columnPATIENT_ID.Unique = true;
                this.columnPATIENT_NAME.AllowDBNull = false;
                this.columnPATIENT_NAME.MaxLength = 50;
                this.columnGENDER.AllowDBNull = false;
                this.columnGENDER.MaxLength = 8;
                this.columnAGE.AllowDBNull = false;
                this.columnADDRESS.AllowDBNull = false;
                this.columnADDRESS.MaxLength = 50;
                this.columnPHONE_NO.MaxLength = 50;
                this.columnADMIT_DATE.AllowDBNull = false;
                this.columnWARD_TYPE.AllowDBNull = false;
                this.columnWARD_TYPE.MaxLength = 50;
                this.columnBED_NO.AllowDBNull = false;
                this.columnNO_OF_DAYS.AllowDBNull = false;
                this.columnDISEASE_TYPE.AllowDBNull = false;
                this.columnDISEASE_TYPE.MaxLength = 50;
                this.columnDOCTOR_ID.AllowDBNull = false;
                this.columnDOCTOR_NAME.AllowDBNull = false;
                this.columnDOCTOR_NAME.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PATIENTDETAILSRow NewPATIENTDETAILSRow() {
                return ((PATIENTDETAILSRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PATIENTDETAILSRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PATIENTDETAILSRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PATIENTDETAILSRowChanged != null)) {
                    this.PATIENTDETAILSRowChanged(this, new PATIENTDETAILSRowChangeEvent(((PATIENTDETAILSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PATIENTDETAILSRowChanging != null)) {
                    this.PATIENTDETAILSRowChanging(this, new PATIENTDETAILSRowChangeEvent(((PATIENTDETAILSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PATIENTDETAILSRowDeleted != null)) {
                    this.PATIENTDETAILSRowDeleted(this, new PATIENTDETAILSRowChangeEvent(((PATIENTDETAILSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PATIENTDETAILSRowDeleting != null)) {
                    this.PATIENTDETAILSRowDeleting(this, new PATIENTDETAILSRowChangeEvent(((PATIENTDETAILSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePATIENTDETAILSRow(PATIENTDETAILSRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                OPERATION_THEATREDataSet1 ds = new OPERATION_THEATREDataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PATIENTDETAILSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class POST_OPERATIONDataTable : global::System.Data.TypedTableBase<POST_OPERATIONRow> {
            
            private global::System.Data.DataColumn columnPATIENT_ID;
            
            private global::System.Data.DataColumn columnOPERATION_STATUS;
            
            private global::System.Data.DataColumn columnINFECTION_STATUS;
            
            private global::System.Data.DataColumn columnBLOOD_PRESSURE;
            
            private global::System.Data.DataColumn columnCHECK_BLOOD_GROUP;
            
            private global::System.Data.DataColumn columnSUGAR_LEVEL_CHECKUP;
            
            private global::System.Data.DataColumn columnPOST_ANESTHETIC_CHECK;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public POST_OPERATIONDataTable() {
                this.TableName = "POST_OPERATION";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal POST_OPERATIONDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected POST_OPERATIONDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PATIENT_IDColumn {
                get {
                    return this.columnPATIENT_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OPERATION_STATUSColumn {
                get {
                    return this.columnOPERATION_STATUS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn INFECTION_STATUSColumn {
                get {
                    return this.columnINFECTION_STATUS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BLOOD_PRESSUREColumn {
                get {
                    return this.columnBLOOD_PRESSURE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CHECK_BLOOD_GROUPColumn {
                get {
                    return this.columnCHECK_BLOOD_GROUP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SUGAR_LEVEL_CHECKUPColumn {
                get {
                    return this.columnSUGAR_LEVEL_CHECKUP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn POST_ANESTHETIC_CHECKColumn {
                get {
                    return this.columnPOST_ANESTHETIC_CHECK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public POST_OPERATIONRow this[int index] {
                get {
                    return ((POST_OPERATIONRow)(this.Rows[index]));
                }
            }
            
            public event POST_OPERATIONRowChangeEventHandler POST_OPERATIONRowChanging;
            
            public event POST_OPERATIONRowChangeEventHandler POST_OPERATIONRowChanged;
            
            public event POST_OPERATIONRowChangeEventHandler POST_OPERATIONRowDeleting;
            
            public event POST_OPERATIONRowChangeEventHandler POST_OPERATIONRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPOST_OPERATIONRow(POST_OPERATIONRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public POST_OPERATIONRow AddPOST_OPERATIONRow(PATIENT_DETAILSRow parentPATIENT_DETAILSRowByFK__POST_OPER__PATIE__2704CA5F, string OPERATION_STATUS, string INFECTION_STATUS, string BLOOD_PRESSURE, string CHECK_BLOOD_GROUP, string SUGAR_LEVEL_CHECKUP, string POST_ANESTHETIC_CHECK) {
                POST_OPERATIONRow rowPOST_OPERATIONRow = ((POST_OPERATIONRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        OPERATION_STATUS,
                        INFECTION_STATUS,
                        BLOOD_PRESSURE,
                        CHECK_BLOOD_GROUP,
                        SUGAR_LEVEL_CHECKUP,
                        POST_ANESTHETIC_CHECK};
                if ((parentPATIENT_DETAILSRowByFK__POST_OPER__PATIE__2704CA5F != null)) {
                    columnValuesArray[0] = parentPATIENT_DETAILSRowByFK__POST_OPER__PATIE__2704CA5F[0];
                }
                rowPOST_OPERATIONRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPOST_OPERATIONRow);
                return rowPOST_OPERATIONRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                POST_OPERATIONDataTable cln = ((POST_OPERATIONDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new POST_OPERATIONDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPATIENT_ID = base.Columns["PATIENT_ID"];
                this.columnOPERATION_STATUS = base.Columns["OPERATION_STATUS"];
                this.columnINFECTION_STATUS = base.Columns["INFECTION_STATUS"];
                this.columnBLOOD_PRESSURE = base.Columns["BLOOD_PRESSURE"];
                this.columnCHECK_BLOOD_GROUP = base.Columns["CHECK_BLOOD_GROUP"];
                this.columnSUGAR_LEVEL_CHECKUP = base.Columns["SUGAR_LEVEL_CHECKUP"];
                this.columnPOST_ANESTHETIC_CHECK = base.Columns["POST_ANESTHETIC_CHECK"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPATIENT_ID = new global::System.Data.DataColumn("PATIENT_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPATIENT_ID);
                this.columnOPERATION_STATUS = new global::System.Data.DataColumn("OPERATION_STATUS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOPERATION_STATUS);
                this.columnINFECTION_STATUS = new global::System.Data.DataColumn("INFECTION_STATUS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnINFECTION_STATUS);
                this.columnBLOOD_PRESSURE = new global::System.Data.DataColumn("BLOOD_PRESSURE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBLOOD_PRESSURE);
                this.columnCHECK_BLOOD_GROUP = new global::System.Data.DataColumn("CHECK_BLOOD_GROUP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCHECK_BLOOD_GROUP);
                this.columnSUGAR_LEVEL_CHECKUP = new global::System.Data.DataColumn("SUGAR_LEVEL_CHECKUP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSUGAR_LEVEL_CHECKUP);
                this.columnPOST_ANESTHETIC_CHECK = new global::System.Data.DataColumn("POST_ANESTHETIC_CHECK", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPOST_ANESTHETIC_CHECK);
                this.columnOPERATION_STATUS.MaxLength = 20;
                this.columnINFECTION_STATUS.MaxLength = 20;
                this.columnBLOOD_PRESSURE.MaxLength = 20;
                this.columnCHECK_BLOOD_GROUP.AllowDBNull = false;
                this.columnCHECK_BLOOD_GROUP.MaxLength = 20;
                this.columnSUGAR_LEVEL_CHECKUP.MaxLength = 20;
                this.columnPOST_ANESTHETIC_CHECK.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public POST_OPERATIONRow NewPOST_OPERATIONRow() {
                return ((POST_OPERATIONRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new POST_OPERATIONRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(POST_OPERATIONRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.POST_OPERATIONRowChanged != null)) {
                    this.POST_OPERATIONRowChanged(this, new POST_OPERATIONRowChangeEvent(((POST_OPERATIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.POST_OPERATIONRowChanging != null)) {
                    this.POST_OPERATIONRowChanging(this, new POST_OPERATIONRowChangeEvent(((POST_OPERATIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.POST_OPERATIONRowDeleted != null)) {
                    this.POST_OPERATIONRowDeleted(this, new POST_OPERATIONRowChangeEvent(((POST_OPERATIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.POST_OPERATIONRowDeleting != null)) {
                    this.POST_OPERATIONRowDeleting(this, new POST_OPERATIONRowChangeEvent(((POST_OPERATIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePOST_OPERATIONRow(POST_OPERATIONRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                OPERATION_THEATREDataSet1 ds = new OPERATION_THEATREDataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "POST_OPERATIONDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PRE_OPERATIONDataTable : global::System.Data.TypedTableBase<PRE_OPERATIONRow> {
            
            private global::System.Data.DataColumn columnPATIENT_ID;
            
            private global::System.Data.DataColumn columnBLOOD_PRESSURE;
            
            private global::System.Data.DataColumn columnCHECK_BLOOD_GROUP;
            
            private global::System.Data.DataColumn columnSUGAR_LEVEL_CHECKUP;
            
            private global::System.Data.DataColumn columnPRE_ANESTHETIC_CHECK;
            
            private global::System.Data.DataColumn columnPULSE_RATE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PRE_OPERATIONDataTable() {
                this.TableName = "PRE_OPERATION";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PRE_OPERATIONDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PRE_OPERATIONDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PATIENT_IDColumn {
                get {
                    return this.columnPATIENT_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BLOOD_PRESSUREColumn {
                get {
                    return this.columnBLOOD_PRESSURE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CHECK_BLOOD_GROUPColumn {
                get {
                    return this.columnCHECK_BLOOD_GROUP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SUGAR_LEVEL_CHECKUPColumn {
                get {
                    return this.columnSUGAR_LEVEL_CHECKUP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PRE_ANESTHETIC_CHECKColumn {
                get {
                    return this.columnPRE_ANESTHETIC_CHECK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PULSE_RATEColumn {
                get {
                    return this.columnPULSE_RATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PRE_OPERATIONRow this[int index] {
                get {
                    return ((PRE_OPERATIONRow)(this.Rows[index]));
                }
            }
            
            public event PRE_OPERATIONRowChangeEventHandler PRE_OPERATIONRowChanging;
            
            public event PRE_OPERATIONRowChangeEventHandler PRE_OPERATIONRowChanged;
            
            public event PRE_OPERATIONRowChangeEventHandler PRE_OPERATIONRowDeleting;
            
            public event PRE_OPERATIONRowChangeEventHandler PRE_OPERATIONRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPRE_OPERATIONRow(PRE_OPERATIONRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PRE_OPERATIONRow AddPRE_OPERATIONRow(PATIENT_DETAILSRow parentPATIENT_DETAILSRowByFK__PRE_OPERA__PATIE__251C81ED, string BLOOD_PRESSURE, string CHECK_BLOOD_GROUP, string SUGAR_LEVEL_CHECKUP, string PRE_ANESTHETIC_CHECK, string PULSE_RATE) {
                PRE_OPERATIONRow rowPRE_OPERATIONRow = ((PRE_OPERATIONRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        BLOOD_PRESSURE,
                        CHECK_BLOOD_GROUP,
                        SUGAR_LEVEL_CHECKUP,
                        PRE_ANESTHETIC_CHECK,
                        PULSE_RATE};
                if ((parentPATIENT_DETAILSRowByFK__PRE_OPERA__PATIE__251C81ED != null)) {
                    columnValuesArray[0] = parentPATIENT_DETAILSRowByFK__PRE_OPERA__PATIE__251C81ED[0];
                }
                rowPRE_OPERATIONRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPRE_OPERATIONRow);
                return rowPRE_OPERATIONRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PRE_OPERATIONDataTable cln = ((PRE_OPERATIONDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PRE_OPERATIONDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPATIENT_ID = base.Columns["PATIENT_ID"];
                this.columnBLOOD_PRESSURE = base.Columns["BLOOD_PRESSURE"];
                this.columnCHECK_BLOOD_GROUP = base.Columns["CHECK_BLOOD_GROUP"];
                this.columnSUGAR_LEVEL_CHECKUP = base.Columns["SUGAR_LEVEL_CHECKUP"];
                this.columnPRE_ANESTHETIC_CHECK = base.Columns["PRE_ANESTHETIC_CHECK"];
                this.columnPULSE_RATE = base.Columns["PULSE_RATE"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPATIENT_ID = new global::System.Data.DataColumn("PATIENT_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPATIENT_ID);
                this.columnBLOOD_PRESSURE = new global::System.Data.DataColumn("BLOOD_PRESSURE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBLOOD_PRESSURE);
                this.columnCHECK_BLOOD_GROUP = new global::System.Data.DataColumn("CHECK_BLOOD_GROUP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCHECK_BLOOD_GROUP);
                this.columnSUGAR_LEVEL_CHECKUP = new global::System.Data.DataColumn("SUGAR_LEVEL_CHECKUP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSUGAR_LEVEL_CHECKUP);
                this.columnPRE_ANESTHETIC_CHECK = new global::System.Data.DataColumn("PRE_ANESTHETIC_CHECK", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRE_ANESTHETIC_CHECK);
                this.columnPULSE_RATE = new global::System.Data.DataColumn("PULSE_RATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPULSE_RATE);
                this.columnPATIENT_ID.AllowDBNull = false;
                this.columnBLOOD_PRESSURE.MaxLength = 20;
                this.columnCHECK_BLOOD_GROUP.AllowDBNull = false;
                this.columnCHECK_BLOOD_GROUP.MaxLength = 20;
                this.columnSUGAR_LEVEL_CHECKUP.MaxLength = 20;
                this.columnPRE_ANESTHETIC_CHECK.MaxLength = 20;
                this.columnPULSE_RATE.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PRE_OPERATIONRow NewPRE_OPERATIONRow() {
                return ((PRE_OPERATIONRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PRE_OPERATIONRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PRE_OPERATIONRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PRE_OPERATIONRowChanged != null)) {
                    this.PRE_OPERATIONRowChanged(this, new PRE_OPERATIONRowChangeEvent(((PRE_OPERATIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PRE_OPERATIONRowChanging != null)) {
                    this.PRE_OPERATIONRowChanging(this, new PRE_OPERATIONRowChangeEvent(((PRE_OPERATIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PRE_OPERATIONRowDeleted != null)) {
                    this.PRE_OPERATIONRowDeleted(this, new PRE_OPERATIONRowChangeEvent(((PRE_OPERATIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PRE_OPERATIONRowDeleting != null)) {
                    this.PRE_OPERATIONRowDeleting(this, new PRE_OPERATIONRowChangeEvent(((PRE_OPERATIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePRE_OPERATIONRow(PRE_OPERATIONRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                OPERATION_THEATREDataSet1 ds = new OPERATION_THEATREDataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PRE_OPERATIONDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class STAFF_DETAILSDataTable : global::System.Data.TypedTableBase<STAFF_DETAILSRow> {
            
            private global::System.Data.DataColumn columnSTAFF_ID;
            
            private global::System.Data.DataColumn columnSTAFF_NAME;
            
            private global::System.Data.DataColumn columnPHONE_NO;
            
            private global::System.Data.DataColumn columnDEPARTMENT_NAME;
            
            private global::System.Data.DataColumn columnSTAFF_DESIGNATION;
            
            private global::System.Data.DataColumn columnSHIFT_TIMINGS;
            
            private global::System.Data.DataColumn columnJOINING_DATE;
            
            private global::System.Data.DataColumn columnSALARY;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STAFF_DETAILSDataTable() {
                this.TableName = "STAFF_DETAILS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal STAFF_DETAILSDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected STAFF_DETAILSDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STAFF_IDColumn {
                get {
                    return this.columnSTAFF_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STAFF_NAMEColumn {
                get {
                    return this.columnSTAFF_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PHONE_NOColumn {
                get {
                    return this.columnPHONE_NO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DEPARTMENT_NAMEColumn {
                get {
                    return this.columnDEPARTMENT_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STAFF_DESIGNATIONColumn {
                get {
                    return this.columnSTAFF_DESIGNATION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SHIFT_TIMINGSColumn {
                get {
                    return this.columnSHIFT_TIMINGS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JOINING_DATEColumn {
                get {
                    return this.columnJOINING_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SALARYColumn {
                get {
                    return this.columnSALARY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STAFF_DETAILSRow this[int index] {
                get {
                    return ((STAFF_DETAILSRow)(this.Rows[index]));
                }
            }
            
            public event STAFF_DETAILSRowChangeEventHandler STAFF_DETAILSRowChanging;
            
            public event STAFF_DETAILSRowChangeEventHandler STAFF_DETAILSRowChanged;
            
            public event STAFF_DETAILSRowChangeEventHandler STAFF_DETAILSRowDeleting;
            
            public event STAFF_DETAILSRowChangeEventHandler STAFF_DETAILSRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSTAFF_DETAILSRow(STAFF_DETAILSRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STAFF_DETAILSRow AddSTAFF_DETAILSRow(string STAFF_NAME, string PHONE_NO, string DEPARTMENT_NAME, string STAFF_DESIGNATION, string SHIFT_TIMINGS, System.DateTime JOINING_DATE, decimal SALARY) {
                STAFF_DETAILSRow rowSTAFF_DETAILSRow = ((STAFF_DETAILSRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        STAFF_NAME,
                        PHONE_NO,
                        DEPARTMENT_NAME,
                        STAFF_DESIGNATION,
                        SHIFT_TIMINGS,
                        JOINING_DATE,
                        SALARY};
                rowSTAFF_DETAILSRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSTAFF_DETAILSRow);
                return rowSTAFF_DETAILSRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STAFF_DETAILSRow FindBySTAFF_ID(int STAFF_ID) {
                return ((STAFF_DETAILSRow)(this.Rows.Find(new object[] {
                            STAFF_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                STAFF_DETAILSDataTable cln = ((STAFF_DETAILSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new STAFF_DETAILSDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSTAFF_ID = base.Columns["STAFF_ID"];
                this.columnSTAFF_NAME = base.Columns["STAFF_NAME"];
                this.columnPHONE_NO = base.Columns["PHONE_NO"];
                this.columnDEPARTMENT_NAME = base.Columns["DEPARTMENT_NAME"];
                this.columnSTAFF_DESIGNATION = base.Columns["STAFF_DESIGNATION"];
                this.columnSHIFT_TIMINGS = base.Columns["SHIFT_TIMINGS"];
                this.columnJOINING_DATE = base.Columns["JOINING_DATE"];
                this.columnSALARY = base.Columns["SALARY"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSTAFF_ID = new global::System.Data.DataColumn("STAFF_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTAFF_ID);
                this.columnSTAFF_NAME = new global::System.Data.DataColumn("STAFF_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTAFF_NAME);
                this.columnPHONE_NO = new global::System.Data.DataColumn("PHONE_NO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPHONE_NO);
                this.columnDEPARTMENT_NAME = new global::System.Data.DataColumn("DEPARTMENT_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDEPARTMENT_NAME);
                this.columnSTAFF_DESIGNATION = new global::System.Data.DataColumn("STAFF_DESIGNATION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTAFF_DESIGNATION);
                this.columnSHIFT_TIMINGS = new global::System.Data.DataColumn("SHIFT_TIMINGS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSHIFT_TIMINGS);
                this.columnJOINING_DATE = new global::System.Data.DataColumn("JOINING_DATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJOINING_DATE);
                this.columnSALARY = new global::System.Data.DataColumn("SALARY", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSALARY);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSTAFF_ID}, true));
                this.columnSTAFF_ID.AutoIncrement = true;
                this.columnSTAFF_ID.AutoIncrementSeed = -1;
                this.columnSTAFF_ID.AutoIncrementStep = -1;
                this.columnSTAFF_ID.AllowDBNull = false;
                this.columnSTAFF_ID.ReadOnly = true;
                this.columnSTAFF_ID.Unique = true;
                this.columnSTAFF_NAME.AllowDBNull = false;
                this.columnSTAFF_NAME.MaxLength = 50;
                this.columnPHONE_NO.AllowDBNull = false;
                this.columnPHONE_NO.MaxLength = 50;
                this.columnDEPARTMENT_NAME.AllowDBNull = false;
                this.columnDEPARTMENT_NAME.MaxLength = 50;
                this.columnSTAFF_DESIGNATION.AllowDBNull = false;
                this.columnSTAFF_DESIGNATION.MaxLength = 50;
                this.columnSHIFT_TIMINGS.AllowDBNull = false;
                this.columnSHIFT_TIMINGS.MaxLength = 50;
                this.columnJOINING_DATE.AllowDBNull = false;
                this.columnSALARY.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STAFF_DETAILSRow NewSTAFF_DETAILSRow() {
                return ((STAFF_DETAILSRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new STAFF_DETAILSRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(STAFF_DETAILSRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.STAFF_DETAILSRowChanged != null)) {
                    this.STAFF_DETAILSRowChanged(this, new STAFF_DETAILSRowChangeEvent(((STAFF_DETAILSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.STAFF_DETAILSRowChanging != null)) {
                    this.STAFF_DETAILSRowChanging(this, new STAFF_DETAILSRowChangeEvent(((STAFF_DETAILSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.STAFF_DETAILSRowDeleted != null)) {
                    this.STAFF_DETAILSRowDeleted(this, new STAFF_DETAILSRowChangeEvent(((STAFF_DETAILSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.STAFF_DETAILSRowDeleting != null)) {
                    this.STAFF_DETAILSRowDeleting(this, new STAFF_DETAILSRowChangeEvent(((STAFF_DETAILSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSTAFF_DETAILSRow(STAFF_DETAILSRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                OPERATION_THEATREDataSet1 ds = new OPERATION_THEATREDataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "STAFF_DETAILSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BILLING_DETAILSRow : global::System.Data.DataRow {
            
            private BILLING_DETAILSDataTable tableBILLING_DETAILS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BILLING_DETAILSRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBILLING_DETAILS = ((BILLING_DETAILSDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PATIENT_ID {
                get {
                    return ((int)(this[this.tableBILLING_DETAILS.PATIENT_IDColumn]));
                }
                set {
                    this[this.tableBILLING_DETAILS.PATIENT_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BLOOD_UNITS_USED {
                get {
                    try {
                        return ((int)(this[this.tableBILLING_DETAILS.BLOOD_UNITS_USEDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BLOOD_UNITS_USED\' in table \'BILLING_DETAILS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBILLING_DETAILS.BLOOD_UNITS_USEDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MEDICINE_CHARGES {
                get {
                    try {
                        return ((decimal)(this[this.tableBILLING_DETAILS.MEDICINE_CHARGESColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MEDICINE_CHARGES\' in table \'BILLING_DETAILS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBILLING_DETAILS.MEDICINE_CHARGESColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DOCTOR_FEE {
                get {
                    try {
                        return ((decimal)(this[this.tableBILLING_DETAILS.DOCTOR_FEEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DOCTOR_FEE\' in table \'BILLING_DETAILS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBILLING_DETAILS.DOCTOR_FEEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ECG_CHARGES {
                get {
                    try {
                        return ((decimal)(this[this.tableBILLING_DETAILS.ECG_CHARGESColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ECG_CHARGES\' in table \'BILLING_DETAILS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBILLING_DETAILS.ECG_CHARGESColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BLOOD_TEST_CHARGES {
                get {
                    try {
                        return ((decimal)(this[this.tableBILLING_DETAILS.BLOOD_TEST_CHARGESColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BLOOD_TEST_CHARGES\' in table \'BILLING_DETAILS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBILLING_DETAILS.BLOOD_TEST_CHARGESColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal XRAY_CHARGES {
                get {
                    try {
                        return ((decimal)(this[this.tableBILLING_DETAILS.XRAY_CHARGESColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'XRAY_CHARGES\' in table \'BILLING_DETAILS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBILLING_DETAILS.XRAY_CHARGESColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BODY_CHECKUP_CHARGES {
                get {
                    try {
                        return ((decimal)(this[this.tableBILLING_DETAILS.BODY_CHECKUP_CHARGESColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BODY_CHECKUP_CHARGES\' in table \'BILLING_DETAILS\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableBILLING_DETAILS.BODY_CHECKUP_CHARGESColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MISCELLANEOUS_CHARGES {
                get {
                    try {
                        return ((decimal)(this[this.tableBILLING_DETAILS.MISCELLANEOUS_CHARGESColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MISCELLANEOUS_CHARGES\' in table \'BILLING_DETAILS\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableBILLING_DETAILS.MISCELLANEOUS_CHARGESColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NO_OF_DAYS_TREATED {
                get {
                    return ((int)(this[this.tableBILLING_DETAILS.NO_OF_DAYS_TREATEDColumn]));
                }
                set {
                    this[this.tableBILLING_DETAILS.NO_OF_DAYS_TREATEDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Total_Amount {
                get {
                    try {
                        return ((decimal)(this[this.tableBILLING_DETAILS.Total_AmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Total_Amount\' in table \'BILLING_DETAILS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBILLING_DETAILS.Total_AmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PATIENT_DETAILSRow PATIENT_DETAILSRow {
                get {
                    return ((PATIENT_DETAILSRow)(this.GetParentRow(this.Table.ParentRelations["FK__BILLING_D__PATIE__28ED12D1"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK__BILLING_D__PATIE__28ED12D1"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBLOOD_UNITS_USEDNull() {
                return this.IsNull(this.tableBILLING_DETAILS.BLOOD_UNITS_USEDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBLOOD_UNITS_USEDNull() {
                this[this.tableBILLING_DETAILS.BLOOD_UNITS_USEDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMEDICINE_CHARGESNull() {
                return this.IsNull(this.tableBILLING_DETAILS.MEDICINE_CHARGESColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMEDICINE_CHARGESNull() {
                this[this.tableBILLING_DETAILS.MEDICINE_CHARGESColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDOCTOR_FEENull() {
                return this.IsNull(this.tableBILLING_DETAILS.DOCTOR_FEEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDOCTOR_FEENull() {
                this[this.tableBILLING_DETAILS.DOCTOR_FEEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsECG_CHARGESNull() {
                return this.IsNull(this.tableBILLING_DETAILS.ECG_CHARGESColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetECG_CHARGESNull() {
                this[this.tableBILLING_DETAILS.ECG_CHARGESColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBLOOD_TEST_CHARGESNull() {
                return this.IsNull(this.tableBILLING_DETAILS.BLOOD_TEST_CHARGESColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBLOOD_TEST_CHARGESNull() {
                this[this.tableBILLING_DETAILS.BLOOD_TEST_CHARGESColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsXRAY_CHARGESNull() {
                return this.IsNull(this.tableBILLING_DETAILS.XRAY_CHARGESColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetXRAY_CHARGESNull() {
                this[this.tableBILLING_DETAILS.XRAY_CHARGESColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBODY_CHECKUP_CHARGESNull() {
                return this.IsNull(this.tableBILLING_DETAILS.BODY_CHECKUP_CHARGESColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBODY_CHECKUP_CHARGESNull() {
                this[this.tableBILLING_DETAILS.BODY_CHECKUP_CHARGESColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMISCELLANEOUS_CHARGESNull() {
                return this.IsNull(this.tableBILLING_DETAILS.MISCELLANEOUS_CHARGESColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMISCELLANEOUS_CHARGESNull() {
                this[this.tableBILLING_DETAILS.MISCELLANEOUS_CHARGESColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotal_AmountNull() {
                return this.IsNull(this.tableBILLING_DETAILS.Total_AmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotal_AmountNull() {
                this[this.tableBILLING_DETAILS.Total_AmountColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DOCTOR_DETAILSRow : global::System.Data.DataRow {
            
            private DOCTOR_DETAILSDataTable tableDOCTOR_DETAILS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DOCTOR_DETAILSRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDOCTOR_DETAILS = ((DOCTOR_DETAILSDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DOC_ID {
                get {
                    return ((int)(this[this.tableDOCTOR_DETAILS.DOC_IDColumn]));
                }
                set {
                    this[this.tableDOCTOR_DETAILS.DOC_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DOC_NAME {
                get {
                    return ((string)(this[this.tableDOCTOR_DETAILS.DOC_NAMEColumn]));
                }
                set {
                    this[this.tableDOCTOR_DETAILS.DOC_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DOC_SPECIALIZATION {
                get {
                    return ((string)(this[this.tableDOCTOR_DETAILS.DOC_SPECIALIZATIONColumn]));
                }
                set {
                    this[this.tableDOCTOR_DETAILS.DOC_SPECIALIZATIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DOC_CONTACT_NO {
                get {
                    return ((string)(this[this.tableDOCTOR_DETAILS.DOC_CONTACT_NOColumn]));
                }
                set {
                    this[this.tableDOCTOR_DETAILS.DOC_CONTACT_NOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DOC_JOIN_DATE {
                get {
                    return ((global::System.DateTime)(this[this.tableDOCTOR_DETAILS.DOC_JOIN_DATEColumn]));
                }
                set {
                    this[this.tableDOCTOR_DETAILS.DOC_JOIN_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DOC_SALARY {
                get {
                    return ((decimal)(this[this.tableDOCTOR_DETAILS.DOC_SALARYColumn]));
                }
                set {
                    this[this.tableDOCTOR_DETAILS.DOC_SALARYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DOC_AVAILABLITY {
                get {
                    return ((string)(this[this.tableDOCTOR_DETAILS.DOC_AVAILABLITYColumn]));
                }
                set {
                    this[this.tableDOCTOR_DETAILS.DOC_AVAILABLITYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DOC_EXPERIENCE {
                get {
                    return ((string)(this[this.tableDOCTOR_DETAILS.DOC_EXPERIENCEColumn]));
                }
                set {
                    this[this.tableDOCTOR_DETAILS.DOC_EXPERIENCEColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PATIENT_DETAILSRow : global::System.Data.DataRow {
            
            private PATIENT_DETAILSDataTable tablePATIENT_DETAILS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PATIENT_DETAILSRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePATIENT_DETAILS = ((PATIENT_DETAILSDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PATIENT_ID {
                get {
                    return ((int)(this[this.tablePATIENT_DETAILS.PATIENT_IDColumn]));
                }
                set {
                    this[this.tablePATIENT_DETAILS.PATIENT_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PATIENT_NAME {
                get {
                    return ((string)(this[this.tablePATIENT_DETAILS.PATIENT_NAMEColumn]));
                }
                set {
                    this[this.tablePATIENT_DETAILS.PATIENT_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GENDER {
                get {
                    return ((string)(this[this.tablePATIENT_DETAILS.GENDERColumn]));
                }
                set {
                    this[this.tablePATIENT_DETAILS.GENDERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AGE {
                get {
                    return ((int)(this[this.tablePATIENT_DETAILS.AGEColumn]));
                }
                set {
                    this[this.tablePATIENT_DETAILS.AGEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ADDRESS {
                get {
                    return ((string)(this[this.tablePATIENT_DETAILS.ADDRESSColumn]));
                }
                set {
                    this[this.tablePATIENT_DETAILS.ADDRESSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PHONE_NO {
                get {
                    try {
                        return ((string)(this[this.tablePATIENT_DETAILS.PHONE_NOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PHONE_NO\' in table \'PATIENT_DETAILS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePATIENT_DETAILS.PHONE_NOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ADMIT_DATE {
                get {
                    return ((global::System.DateTime)(this[this.tablePATIENT_DETAILS.ADMIT_DATEColumn]));
                }
                set {
                    this[this.tablePATIENT_DETAILS.ADMIT_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DISCHARGE_DATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePATIENT_DETAILS.DISCHARGE_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DISCHARGE_DATE\' in table \'PATIENT_DETAILS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePATIENT_DETAILS.DISCHARGE_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WARD_TYPE {
                get {
                    return ((string)(this[this.tablePATIENT_DETAILS.WARD_TYPEColumn]));
                }
                set {
                    this[this.tablePATIENT_DETAILS.WARD_TYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BED_NO {
                get {
                    return ((int)(this[this.tablePATIENT_DETAILS.BED_NOColumn]));
                }
                set {
                    this[this.tablePATIENT_DETAILS.BED_NOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NO_OF_DAYS {
                get {
                    return ((int)(this[this.tablePATIENT_DETAILS.NO_OF_DAYSColumn]));
                }
                set {
                    this[this.tablePATIENT_DETAILS.NO_OF_DAYSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DISEASE_TYPE {
                get {
                    return ((string)(this[this.tablePATIENT_DETAILS.DISEASE_TYPEColumn]));
                }
                set {
                    this[this.tablePATIENT_DETAILS.DISEASE_TYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DOCTOR_ID {
                get {
                    return ((int)(this[this.tablePATIENT_DETAILS.DOCTOR_IDColumn]));
                }
                set {
                    this[this.tablePATIENT_DETAILS.DOCTOR_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DOCTOR_NAME {
                get {
                    return ((string)(this[this.tablePATIENT_DETAILS.DOCTOR_NAMEColumn]));
                }
                set {
                    this[this.tablePATIENT_DETAILS.DOCTOR_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime OPERATION_DATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePATIENT_DETAILS.OPERATION_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OPERATION_DATE\' in table \'PATIENT_DETAILS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePATIENT_DETAILS.OPERATION_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OPERATIONTHEATRE_ID {
                get {
                    try {
                        return ((int)(this[this.tablePATIENT_DETAILS.OPERATIONTHEATRE_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OPERATIONTHEATRE_ID\' in table \'PATIENT_DETAILS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePATIENT_DETAILS.OPERATIONTHEATRE_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPHONE_NONull() {
                return this.IsNull(this.tablePATIENT_DETAILS.PHONE_NOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPHONE_NONull() {
                this[this.tablePATIENT_DETAILS.PHONE_NOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDISCHARGE_DATENull() {
                return this.IsNull(this.tablePATIENT_DETAILS.DISCHARGE_DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDISCHARGE_DATENull() {
                this[this.tablePATIENT_DETAILS.DISCHARGE_DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOPERATION_DATENull() {
                return this.IsNull(this.tablePATIENT_DETAILS.OPERATION_DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOPERATION_DATENull() {
                this[this.tablePATIENT_DETAILS.OPERATION_DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOPERATIONTHEATRE_IDNull() {
                return this.IsNull(this.tablePATIENT_DETAILS.OPERATIONTHEATRE_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOPERATIONTHEATRE_IDNull() {
                this[this.tablePATIENT_DETAILS.OPERATIONTHEATRE_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BILLING_DETAILSRow[] GetBILLING_DETAILSRows() {
                if ((this.Table.ChildRelations["FK__BILLING_D__PATIE__28ED12D1"] == null)) {
                    return new BILLING_DETAILSRow[0];
                }
                else {
                    return ((BILLING_DETAILSRow[])(base.GetChildRows(this.Table.ChildRelations["FK__BILLING_D__PATIE__28ED12D1"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public POST_OPERATIONRow[] GetPOST_OPERATIONRows() {
                if ((this.Table.ChildRelations["FK__POST_OPER__PATIE__2704CA5F"] == null)) {
                    return new POST_OPERATIONRow[0];
                }
                else {
                    return ((POST_OPERATIONRow[])(base.GetChildRows(this.Table.ChildRelations["FK__POST_OPER__PATIE__2704CA5F"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PRE_OPERATIONRow[] GetPRE_OPERATIONRows() {
                if ((this.Table.ChildRelations["FK__PRE_OPERA__PATIE__251C81ED"] == null)) {
                    return new PRE_OPERATIONRow[0];
                }
                else {
                    return ((PRE_OPERATIONRow[])(base.GetChildRows(this.Table.ChildRelations["FK__PRE_OPERA__PATIE__251C81ED"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PATIENTDETAILSRow : global::System.Data.DataRow {
            
            private PATIENTDETAILSDataTable tablePATIENTDETAILS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PATIENTDETAILSRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePATIENTDETAILS = ((PATIENTDETAILSDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PATIENT_ID {
                get {
                    return ((int)(this[this.tablePATIENTDETAILS.PATIENT_IDColumn]));
                }
                set {
                    this[this.tablePATIENTDETAILS.PATIENT_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PATIENT_NAME {
                get {
                    return ((string)(this[this.tablePATIENTDETAILS.PATIENT_NAMEColumn]));
                }
                set {
                    this[this.tablePATIENTDETAILS.PATIENT_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GENDER {
                get {
                    return ((string)(this[this.tablePATIENTDETAILS.GENDERColumn]));
                }
                set {
                    this[this.tablePATIENTDETAILS.GENDERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AGE {
                get {
                    return ((int)(this[this.tablePATIENTDETAILS.AGEColumn]));
                }
                set {
                    this[this.tablePATIENTDETAILS.AGEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ADDRESS {
                get {
                    return ((string)(this[this.tablePATIENTDETAILS.ADDRESSColumn]));
                }
                set {
                    this[this.tablePATIENTDETAILS.ADDRESSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PHONE_NO {
                get {
                    try {
                        return ((string)(this[this.tablePATIENTDETAILS.PHONE_NOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PHONE_NO\' in table \'PATIENTDETAILS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePATIENTDETAILS.PHONE_NOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ADMIT_DATE {
                get {
                    return ((global::System.DateTime)(this[this.tablePATIENTDETAILS.ADMIT_DATEColumn]));
                }
                set {
                    this[this.tablePATIENTDETAILS.ADMIT_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DISCHARGE_DATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePATIENTDETAILS.DISCHARGE_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DISCHARGE_DATE\' in table \'PATIENTDETAILS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePATIENTDETAILS.DISCHARGE_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WARD_TYPE {
                get {
                    return ((string)(this[this.tablePATIENTDETAILS.WARD_TYPEColumn]));
                }
                set {
                    this[this.tablePATIENTDETAILS.WARD_TYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BED_NO {
                get {
                    return ((int)(this[this.tablePATIENTDETAILS.BED_NOColumn]));
                }
                set {
                    this[this.tablePATIENTDETAILS.BED_NOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NO_OF_DAYS {
                get {
                    return ((int)(this[this.tablePATIENTDETAILS.NO_OF_DAYSColumn]));
                }
                set {
                    this[this.tablePATIENTDETAILS.NO_OF_DAYSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DISEASE_TYPE {
                get {
                    return ((string)(this[this.tablePATIENTDETAILS.DISEASE_TYPEColumn]));
                }
                set {
                    this[this.tablePATIENTDETAILS.DISEASE_TYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DOCTOR_ID {
                get {
                    return ((int)(this[this.tablePATIENTDETAILS.DOCTOR_IDColumn]));
                }
                set {
                    this[this.tablePATIENTDETAILS.DOCTOR_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DOCTOR_NAME {
                get {
                    return ((string)(this[this.tablePATIENTDETAILS.DOCTOR_NAMEColumn]));
                }
                set {
                    this[this.tablePATIENTDETAILS.DOCTOR_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime OPERATION_DATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePATIENTDETAILS.OPERATION_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OPERATION_DATE\' in table \'PATIENTDETAILS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePATIENTDETAILS.OPERATION_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OPERATION_ID {
                get {
                    try {
                        return ((int)(this[this.tablePATIENTDETAILS.OPERATION_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OPERATION_ID\' in table \'PATIENTDETAILS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePATIENTDETAILS.OPERATION_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPHONE_NONull() {
                return this.IsNull(this.tablePATIENTDETAILS.PHONE_NOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPHONE_NONull() {
                this[this.tablePATIENTDETAILS.PHONE_NOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDISCHARGE_DATENull() {
                return this.IsNull(this.tablePATIENTDETAILS.DISCHARGE_DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDISCHARGE_DATENull() {
                this[this.tablePATIENTDETAILS.DISCHARGE_DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOPERATION_DATENull() {
                return this.IsNull(this.tablePATIENTDETAILS.OPERATION_DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOPERATION_DATENull() {
                this[this.tablePATIENTDETAILS.OPERATION_DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOPERATION_IDNull() {
                return this.IsNull(this.tablePATIENTDETAILS.OPERATION_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOPERATION_IDNull() {
                this[this.tablePATIENTDETAILS.OPERATION_IDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class POST_OPERATIONRow : global::System.Data.DataRow {
            
            private POST_OPERATIONDataTable tablePOST_OPERATION;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal POST_OPERATIONRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePOST_OPERATION = ((POST_OPERATIONDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PATIENT_ID {
                get {
                    try {
                        return ((int)(this[this.tablePOST_OPERATION.PATIENT_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PATIENT_ID\' in table \'POST_OPERATION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePOST_OPERATION.PATIENT_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OPERATION_STATUS {
                get {
                    try {
                        return ((string)(this[this.tablePOST_OPERATION.OPERATION_STATUSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OPERATION_STATUS\' in table \'POST_OPERATION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePOST_OPERATION.OPERATION_STATUSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string INFECTION_STATUS {
                get {
                    try {
                        return ((string)(this[this.tablePOST_OPERATION.INFECTION_STATUSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'INFECTION_STATUS\' in table \'POST_OPERATION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePOST_OPERATION.INFECTION_STATUSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BLOOD_PRESSURE {
                get {
                    try {
                        return ((string)(this[this.tablePOST_OPERATION.BLOOD_PRESSUREColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BLOOD_PRESSURE\' in table \'POST_OPERATION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePOST_OPERATION.BLOOD_PRESSUREColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CHECK_BLOOD_GROUP {
                get {
                    return ((string)(this[this.tablePOST_OPERATION.CHECK_BLOOD_GROUPColumn]));
                }
                set {
                    this[this.tablePOST_OPERATION.CHECK_BLOOD_GROUPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SUGAR_LEVEL_CHECKUP {
                get {
                    try {
                        return ((string)(this[this.tablePOST_OPERATION.SUGAR_LEVEL_CHECKUPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SUGAR_LEVEL_CHECKUP\' in table \'POST_OPERATION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePOST_OPERATION.SUGAR_LEVEL_CHECKUPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string POST_ANESTHETIC_CHECK {
                get {
                    try {
                        return ((string)(this[this.tablePOST_OPERATION.POST_ANESTHETIC_CHECKColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'POST_ANESTHETIC_CHECK\' in table \'POST_OPERATION\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablePOST_OPERATION.POST_ANESTHETIC_CHECKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PATIENT_DETAILSRow PATIENT_DETAILSRow {
                get {
                    return ((PATIENT_DETAILSRow)(this.GetParentRow(this.Table.ParentRelations["FK__POST_OPER__PATIE__2704CA5F"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK__POST_OPER__PATIE__2704CA5F"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPATIENT_IDNull() {
                return this.IsNull(this.tablePOST_OPERATION.PATIENT_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPATIENT_IDNull() {
                this[this.tablePOST_OPERATION.PATIENT_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOPERATION_STATUSNull() {
                return this.IsNull(this.tablePOST_OPERATION.OPERATION_STATUSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOPERATION_STATUSNull() {
                this[this.tablePOST_OPERATION.OPERATION_STATUSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsINFECTION_STATUSNull() {
                return this.IsNull(this.tablePOST_OPERATION.INFECTION_STATUSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetINFECTION_STATUSNull() {
                this[this.tablePOST_OPERATION.INFECTION_STATUSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBLOOD_PRESSURENull() {
                return this.IsNull(this.tablePOST_OPERATION.BLOOD_PRESSUREColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBLOOD_PRESSURENull() {
                this[this.tablePOST_OPERATION.BLOOD_PRESSUREColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSUGAR_LEVEL_CHECKUPNull() {
                return this.IsNull(this.tablePOST_OPERATION.SUGAR_LEVEL_CHECKUPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSUGAR_LEVEL_CHECKUPNull() {
                this[this.tablePOST_OPERATION.SUGAR_LEVEL_CHECKUPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPOST_ANESTHETIC_CHECKNull() {
                return this.IsNull(this.tablePOST_OPERATION.POST_ANESTHETIC_CHECKColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPOST_ANESTHETIC_CHECKNull() {
                this[this.tablePOST_OPERATION.POST_ANESTHETIC_CHECKColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PRE_OPERATIONRow : global::System.Data.DataRow {
            
            private PRE_OPERATIONDataTable tablePRE_OPERATION;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PRE_OPERATIONRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePRE_OPERATION = ((PRE_OPERATIONDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PATIENT_ID {
                get {
                    return ((int)(this[this.tablePRE_OPERATION.PATIENT_IDColumn]));
                }
                set {
                    this[this.tablePRE_OPERATION.PATIENT_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BLOOD_PRESSURE {
                get {
                    try {
                        return ((string)(this[this.tablePRE_OPERATION.BLOOD_PRESSUREColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BLOOD_PRESSURE\' in table \'PRE_OPERATION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePRE_OPERATION.BLOOD_PRESSUREColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CHECK_BLOOD_GROUP {
                get {
                    return ((string)(this[this.tablePRE_OPERATION.CHECK_BLOOD_GROUPColumn]));
                }
                set {
                    this[this.tablePRE_OPERATION.CHECK_BLOOD_GROUPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SUGAR_LEVEL_CHECKUP {
                get {
                    try {
                        return ((string)(this[this.tablePRE_OPERATION.SUGAR_LEVEL_CHECKUPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SUGAR_LEVEL_CHECKUP\' in table \'PRE_OPERATION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePRE_OPERATION.SUGAR_LEVEL_CHECKUPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PRE_ANESTHETIC_CHECK {
                get {
                    try {
                        return ((string)(this[this.tablePRE_OPERATION.PRE_ANESTHETIC_CHECKColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PRE_ANESTHETIC_CHECK\' in table \'PRE_OPERATION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePRE_OPERATION.PRE_ANESTHETIC_CHECKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PULSE_RATE {
                get {
                    try {
                        return ((string)(this[this.tablePRE_OPERATION.PULSE_RATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PULSE_RATE\' in table \'PRE_OPERATION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePRE_OPERATION.PULSE_RATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PATIENT_DETAILSRow PATIENT_DETAILSRow {
                get {
                    return ((PATIENT_DETAILSRow)(this.GetParentRow(this.Table.ParentRelations["FK__PRE_OPERA__PATIE__251C81ED"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK__PRE_OPERA__PATIE__251C81ED"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBLOOD_PRESSURENull() {
                return this.IsNull(this.tablePRE_OPERATION.BLOOD_PRESSUREColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBLOOD_PRESSURENull() {
                this[this.tablePRE_OPERATION.BLOOD_PRESSUREColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSUGAR_LEVEL_CHECKUPNull() {
                return this.IsNull(this.tablePRE_OPERATION.SUGAR_LEVEL_CHECKUPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSUGAR_LEVEL_CHECKUPNull() {
                this[this.tablePRE_OPERATION.SUGAR_LEVEL_CHECKUPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPRE_ANESTHETIC_CHECKNull() {
                return this.IsNull(this.tablePRE_OPERATION.PRE_ANESTHETIC_CHECKColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPRE_ANESTHETIC_CHECKNull() {
                this[this.tablePRE_OPERATION.PRE_ANESTHETIC_CHECKColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPULSE_RATENull() {
                return this.IsNull(this.tablePRE_OPERATION.PULSE_RATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPULSE_RATENull() {
                this[this.tablePRE_OPERATION.PULSE_RATEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class STAFF_DETAILSRow : global::System.Data.DataRow {
            
            private STAFF_DETAILSDataTable tableSTAFF_DETAILS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal STAFF_DETAILSRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSTAFF_DETAILS = ((STAFF_DETAILSDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int STAFF_ID {
                get {
                    return ((int)(this[this.tableSTAFF_DETAILS.STAFF_IDColumn]));
                }
                set {
                    this[this.tableSTAFF_DETAILS.STAFF_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STAFF_NAME {
                get {
                    return ((string)(this[this.tableSTAFF_DETAILS.STAFF_NAMEColumn]));
                }
                set {
                    this[this.tableSTAFF_DETAILS.STAFF_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PHONE_NO {
                get {
                    return ((string)(this[this.tableSTAFF_DETAILS.PHONE_NOColumn]));
                }
                set {
                    this[this.tableSTAFF_DETAILS.PHONE_NOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DEPARTMENT_NAME {
                get {
                    return ((string)(this[this.tableSTAFF_DETAILS.DEPARTMENT_NAMEColumn]));
                }
                set {
                    this[this.tableSTAFF_DETAILS.DEPARTMENT_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STAFF_DESIGNATION {
                get {
                    return ((string)(this[this.tableSTAFF_DETAILS.STAFF_DESIGNATIONColumn]));
                }
                set {
                    this[this.tableSTAFF_DETAILS.STAFF_DESIGNATIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SHIFT_TIMINGS {
                get {
                    return ((string)(this[this.tableSTAFF_DETAILS.SHIFT_TIMINGSColumn]));
                }
                set {
                    this[this.tableSTAFF_DETAILS.SHIFT_TIMINGSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime JOINING_DATE {
                get {
                    return ((global::System.DateTime)(this[this.tableSTAFF_DETAILS.JOINING_DATEColumn]));
                }
                set {
                    this[this.tableSTAFF_DETAILS.JOINING_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SALARY {
                get {
                    return ((decimal)(this[this.tableSTAFF_DETAILS.SALARYColumn]));
                }
                set {
                    this[this.tableSTAFF_DETAILS.SALARYColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BILLING_DETAILSRowChangeEvent : global::System.EventArgs {
            
            private BILLING_DETAILSRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BILLING_DETAILSRowChangeEvent(BILLING_DETAILSRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BILLING_DETAILSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DOCTOR_DETAILSRowChangeEvent : global::System.EventArgs {
            
            private DOCTOR_DETAILSRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DOCTOR_DETAILSRowChangeEvent(DOCTOR_DETAILSRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DOCTOR_DETAILSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PATIENT_DETAILSRowChangeEvent : global::System.EventArgs {
            
            private PATIENT_DETAILSRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PATIENT_DETAILSRowChangeEvent(PATIENT_DETAILSRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PATIENT_DETAILSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PATIENTDETAILSRowChangeEvent : global::System.EventArgs {
            
            private PATIENTDETAILSRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PATIENTDETAILSRowChangeEvent(PATIENTDETAILSRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PATIENTDETAILSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class POST_OPERATIONRowChangeEvent : global::System.EventArgs {
            
            private POST_OPERATIONRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public POST_OPERATIONRowChangeEvent(POST_OPERATIONRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public POST_OPERATIONRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PRE_OPERATIONRowChangeEvent : global::System.EventArgs {
            
            private PRE_OPERATIONRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PRE_OPERATIONRowChangeEvent(PRE_OPERATIONRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PRE_OPERATIONRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class STAFF_DETAILSRowChangeEvent : global::System.EventArgs {
            
            private STAFF_DETAILSRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STAFF_DETAILSRowChangeEvent(STAFF_DETAILSRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STAFF_DETAILSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace WindowsFormsApplication1.OPERATION_THEATREDataSet1TableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class BILLING_DETAILSTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public BILLING_DETAILSTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "BILLING_DETAILS";
            tableMapping.ColumnMappings.Add("PATIENT_ID", "PATIENT_ID");
            tableMapping.ColumnMappings.Add("BLOOD_UNITS_USED", "BLOOD_UNITS_USED");
            tableMapping.ColumnMappings.Add("MEDICINE_CHARGES", "MEDICINE_CHARGES");
            tableMapping.ColumnMappings.Add("DOCTOR_FEE", "DOCTOR_FEE");
            tableMapping.ColumnMappings.Add("ECG_CHARGES", "ECG_CHARGES");
            tableMapping.ColumnMappings.Add("BLOOD_TEST_CHARGES", "BLOOD_TEST_CHARGES");
            tableMapping.ColumnMappings.Add("XRAY_CHARGES", "XRAY_CHARGES");
            tableMapping.ColumnMappings.Add("BODY_CHECKUP_CHARGES", "BODY_CHECKUP_CHARGES");
            tableMapping.ColumnMappings.Add("MISCELLANEOUS_CHARGES", "MISCELLANEOUS_CHARGES");
            tableMapping.ColumnMappings.Add("NO_OF_DAYS_TREATED", "NO_OF_DAYS_TREATED");
            tableMapping.ColumnMappings.Add("Total_Amount", "Total_Amount");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[BILLING_DETAILS] ([PATIENT_ID], [BLOOD_UNITS_USED], [MEDICINE_CHARGES], [DOCTOR_FEE], [ECG_CHARGES], [BLOOD_TEST_CHARGES], [XRAY_CHARGES], [BODY_CHECKUP_CHARGES], [MISCELLANEOUS_CHARGES], [NO_OF_DAYS_TREATED], [Total_Amount]) VALUES (@PATIENT_ID, @BLOOD_UNITS_USED, @MEDICINE_CHARGES, @DOCTOR_FEE, @ECG_CHARGES, @BLOOD_TEST_CHARGES, @XRAY_CHARGES, @BODY_CHECKUP_CHARGES, @MISCELLANEOUS_CHARGES, @NO_OF_DAYS_TREATED, @Total_Amount)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PATIENT_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PATIENT_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BLOOD_UNITS_USED", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BLOOD_UNITS_USED", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MEDICINE_CHARGES", global::System.Data.SqlDbType.SmallMoney, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MEDICINE_CHARGES", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DOCTOR_FEE", global::System.Data.SqlDbType.SmallMoney, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DOCTOR_FEE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ECG_CHARGES", global::System.Data.SqlDbType.SmallMoney, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ECG_CHARGES", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BLOOD_TEST_CHARGES", global::System.Data.SqlDbType.SmallMoney, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BLOOD_TEST_CHARGES", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@XRAY_CHARGES", global::System.Data.SqlDbType.SmallMoney, 0, global::System.Data.ParameterDirection.Input, 0, 0, "XRAY_CHARGES", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BODY_CHECKUP_CHARGES", global::System.Data.SqlDbType.SmallMoney, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BODY_CHECKUP_CHARGES", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MISCELLANEOUS_CHARGES", global::System.Data.SqlDbType.SmallMoney, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MISCELLANEOUS_CHARGES", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NO_OF_DAYS_TREATED", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NO_OF_DAYS_TREATED", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Total_Amount", global::System.Data.SqlDbType.SmallMoney, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Total_Amount", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::WindowsFormsApplication1.Properties.Settings.Default.ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT PATIENT_ID, BLOOD_UNITS_USED, MEDICINE_CHARGES, DOCTOR_FEE, ECG_CHARGES, B" +
                "LOOD_TEST_CHARGES, XRAY_CHARGES, BODY_CHECKUP_CHARGES, MISCELLANEOUS_CHARGES, NO" +
                "_OF_DAYS_TREATED, Total_Amount FROM dbo.BILLING_DETAILS";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(OPERATION_THEATREDataSet1.BILLING_DETAILSDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual OPERATION_THEATREDataSet1.BILLING_DETAILSDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            OPERATION_THEATREDataSet1.BILLING_DETAILSDataTable dataTable = new OPERATION_THEATREDataSet1.BILLING_DETAILSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(OPERATION_THEATREDataSet1.BILLING_DETAILSDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(OPERATION_THEATREDataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "BILLING_DETAILS");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int PATIENT_ID, global::System.Nullable<int> BLOOD_UNITS_USED, global::System.Nullable<decimal> MEDICINE_CHARGES, global::System.Nullable<decimal> DOCTOR_FEE, global::System.Nullable<decimal> ECG_CHARGES, global::System.Nullable<decimal> BLOOD_TEST_CHARGES, global::System.Nullable<decimal> XRAY_CHARGES, global::System.Nullable<decimal> BODY_CHECKUP_CHARGES, global::System.Nullable<decimal> MISCELLANEOUS_CHARGES, int NO_OF_DAYS_TREATED, global::System.Nullable<decimal> Total_Amount) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(PATIENT_ID));
            if ((BLOOD_UNITS_USED.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((int)(BLOOD_UNITS_USED.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((MEDICINE_CHARGES.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((decimal)(MEDICINE_CHARGES.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((DOCTOR_FEE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((decimal)(DOCTOR_FEE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((ECG_CHARGES.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((decimal)(ECG_CHARGES.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((BLOOD_TEST_CHARGES.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((decimal)(BLOOD_TEST_CHARGES.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((XRAY_CHARGES.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((decimal)(XRAY_CHARGES.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((BODY_CHECKUP_CHARGES.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((decimal)(BODY_CHECKUP_CHARGES.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((MISCELLANEOUS_CHARGES.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((decimal)(MISCELLANEOUS_CHARGES.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[9].Value = ((int)(NO_OF_DAYS_TREATED));
            if ((Total_Amount.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((decimal)(Total_Amount.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DOCTOR_DETAILSTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DOCTOR_DETAILSTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "DOCTOR_DETAILS";
            tableMapping.ColumnMappings.Add("DOC_ID", "DOC_ID");
            tableMapping.ColumnMappings.Add("DOC_NAME", "DOC_NAME");
            tableMapping.ColumnMappings.Add("DOC_SPECIALIZATION", "DOC_SPECIALIZATION");
            tableMapping.ColumnMappings.Add("DOC_CONTACT_NO", "DOC_CONTACT_NO");
            tableMapping.ColumnMappings.Add("DOC_JOIN_DATE", "DOC_JOIN_DATE");
            tableMapping.ColumnMappings.Add("DOC_SALARY", "DOC_SALARY");
            tableMapping.ColumnMappings.Add("DOC_AVAILABLITY", "DOC_AVAILABLITY");
            tableMapping.ColumnMappings.Add("DOC_EXPERIENCE", "DOC_EXPERIENCE");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[DOCTOR_DETAILS] WHERE (([DOC_ID] = @Original_DOC_ID) AND ([DOC_NAME] = @Original_DOC_NAME) AND ([DOC_SPECIALIZATION] = @Original_DOC_SPECIALIZATION) AND ([DOC_CONTACT_NO] = @Original_DOC_CONTACT_NO) AND ([DOC_JOIN_DATE] = @Original_DOC_JOIN_DATE) AND ([DOC_SALARY] = @Original_DOC_SALARY) AND ([DOC_AVAILABLITY] = @Original_DOC_AVAILABLITY) AND ([DOC_EXPERIENCE] = @Original_DOC_EXPERIENCE))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DOC_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DOC_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DOC_NAME", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DOC_NAME", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DOC_SPECIALIZATION", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DOC_SPECIALIZATION", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DOC_CONTACT_NO", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DOC_CONTACT_NO", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DOC_JOIN_DATE", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DOC_JOIN_DATE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DOC_SALARY", global::System.Data.SqlDbType.SmallMoney, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DOC_SALARY", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DOC_AVAILABLITY", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DOC_AVAILABLITY", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DOC_EXPERIENCE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DOC_EXPERIENCE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[DOCTOR_DETAILS] ([DOC_ID], [DOC_NAME], [DOC_SPECIALIZATION], [DOC_CONTACT_NO], [DOC_JOIN_DATE], [DOC_SALARY], [DOC_AVAILABLITY], [DOC_EXPERIENCE]) VALUES (@DOC_ID, @DOC_NAME, @DOC_SPECIALIZATION, @DOC_CONTACT_NO, @DOC_JOIN_DATE, @DOC_SALARY, @DOC_AVAILABLITY, @DOC_EXPERIENCE);
SELECT DOC_ID, DOC_NAME, DOC_SPECIALIZATION, DOC_CONTACT_NO, DOC_JOIN_DATE, DOC_SALARY, DOC_AVAILABLITY, DOC_EXPERIENCE FROM DOCTOR_DETAILS WHERE (DOC_ID = @DOC_ID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DOC_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DOC_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DOC_NAME", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DOC_NAME", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DOC_SPECIALIZATION", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DOC_SPECIALIZATION", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DOC_CONTACT_NO", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DOC_CONTACT_NO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DOC_JOIN_DATE", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DOC_JOIN_DATE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DOC_SALARY", global::System.Data.SqlDbType.SmallMoney, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DOC_SALARY", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DOC_AVAILABLITY", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DOC_AVAILABLITY", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DOC_EXPERIENCE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DOC_EXPERIENCE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[DOCTOR_DETAILS] SET [DOC_ID] = @DOC_ID, [DOC_NAME] = @DOC_NAME, [DOC_SPECIALIZATION] = @DOC_SPECIALIZATION, [DOC_CONTACT_NO] = @DOC_CONTACT_NO, [DOC_JOIN_DATE] = @DOC_JOIN_DATE, [DOC_SALARY] = @DOC_SALARY, [DOC_AVAILABLITY] = @DOC_AVAILABLITY, [DOC_EXPERIENCE] = @DOC_EXPERIENCE WHERE (([DOC_ID] = @Original_DOC_ID) AND ([DOC_NAME] = @Original_DOC_NAME) AND ([DOC_SPECIALIZATION] = @Original_DOC_SPECIALIZATION) AND ([DOC_CONTACT_NO] = @Original_DOC_CONTACT_NO) AND ([DOC_JOIN_DATE] = @Original_DOC_JOIN_DATE) AND ([DOC_SALARY] = @Original_DOC_SALARY) AND ([DOC_AVAILABLITY] = @Original_DOC_AVAILABLITY) AND ([DOC_EXPERIENCE] = @Original_DOC_EXPERIENCE));
SELECT DOC_ID, DOC_NAME, DOC_SPECIALIZATION, DOC_CONTACT_NO, DOC_JOIN_DATE, DOC_SALARY, DOC_AVAILABLITY, DOC_EXPERIENCE FROM DOCTOR_DETAILS WHERE (DOC_ID = @DOC_ID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DOC_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DOC_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DOC_NAME", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DOC_NAME", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DOC_SPECIALIZATION", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DOC_SPECIALIZATION", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DOC_CONTACT_NO", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DOC_CONTACT_NO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DOC_JOIN_DATE", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DOC_JOIN_DATE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DOC_SALARY", global::System.Data.SqlDbType.SmallMoney, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DOC_SALARY", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DOC_AVAILABLITY", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DOC_AVAILABLITY", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DOC_EXPERIENCE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DOC_EXPERIENCE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DOC_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DOC_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DOC_NAME", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DOC_NAME", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DOC_SPECIALIZATION", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DOC_SPECIALIZATION", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DOC_CONTACT_NO", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DOC_CONTACT_NO", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DOC_JOIN_DATE", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DOC_JOIN_DATE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DOC_SALARY", global::System.Data.SqlDbType.SmallMoney, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DOC_SALARY", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DOC_AVAILABLITY", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DOC_AVAILABLITY", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DOC_EXPERIENCE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DOC_EXPERIENCE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::WindowsFormsApplication1.Properties.Settings.Default.ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT DOC_ID, DOC_NAME, DOC_SPECIALIZATION, DOC_CONTACT_NO, DOC_JOIN_DATE, DOC_S" +
                "ALARY, DOC_AVAILABLITY, DOC_EXPERIENCE FROM dbo.DOCTOR_DETAILS";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(OPERATION_THEATREDataSet1.DOCTOR_DETAILSDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual OPERATION_THEATREDataSet1.DOCTOR_DETAILSDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            OPERATION_THEATREDataSet1.DOCTOR_DETAILSDataTable dataTable = new OPERATION_THEATREDataSet1.DOCTOR_DETAILSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(OPERATION_THEATREDataSet1.DOCTOR_DETAILSDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(OPERATION_THEATREDataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "DOCTOR_DETAILS");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_DOC_ID, string Original_DOC_NAME, string Original_DOC_SPECIALIZATION, string Original_DOC_CONTACT_NO, System.DateTime Original_DOC_JOIN_DATE, decimal Original_DOC_SALARY, string Original_DOC_AVAILABLITY, string Original_DOC_EXPERIENCE) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_DOC_ID));
            if ((Original_DOC_NAME == null)) {
                throw new global::System.ArgumentNullException("Original_DOC_NAME");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_DOC_NAME));
            }
            if ((Original_DOC_SPECIALIZATION == null)) {
                throw new global::System.ArgumentNullException("Original_DOC_SPECIALIZATION");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_DOC_SPECIALIZATION));
            }
            if ((Original_DOC_CONTACT_NO == null)) {
                throw new global::System.ArgumentNullException("Original_DOC_CONTACT_NO");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_DOC_CONTACT_NO));
            }
            this.Adapter.DeleteCommand.Parameters[4].Value = ((System.DateTime)(Original_DOC_JOIN_DATE));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((decimal)(Original_DOC_SALARY));
            if ((Original_DOC_AVAILABLITY == null)) {
                throw new global::System.ArgumentNullException("Original_DOC_AVAILABLITY");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_DOC_AVAILABLITY));
            }
            if ((Original_DOC_EXPERIENCE == null)) {
                throw new global::System.ArgumentNullException("Original_DOC_EXPERIENCE");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_DOC_EXPERIENCE));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int DOC_ID, string DOC_NAME, string DOC_SPECIALIZATION, string DOC_CONTACT_NO, System.DateTime DOC_JOIN_DATE, decimal DOC_SALARY, string DOC_AVAILABLITY, string DOC_EXPERIENCE) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(DOC_ID));
            if ((DOC_NAME == null)) {
                throw new global::System.ArgumentNullException("DOC_NAME");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(DOC_NAME));
            }
            if ((DOC_SPECIALIZATION == null)) {
                throw new global::System.ArgumentNullException("DOC_SPECIALIZATION");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(DOC_SPECIALIZATION));
            }
            if ((DOC_CONTACT_NO == null)) {
                throw new global::System.ArgumentNullException("DOC_CONTACT_NO");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(DOC_CONTACT_NO));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((System.DateTime)(DOC_JOIN_DATE));
            this.Adapter.InsertCommand.Parameters[5].Value = ((decimal)(DOC_SALARY));
            if ((DOC_AVAILABLITY == null)) {
                throw new global::System.ArgumentNullException("DOC_AVAILABLITY");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(DOC_AVAILABLITY));
            }
            if ((DOC_EXPERIENCE == null)) {
                throw new global::System.ArgumentNullException("DOC_EXPERIENCE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(DOC_EXPERIENCE));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int DOC_ID, 
                    string DOC_NAME, 
                    string DOC_SPECIALIZATION, 
                    string DOC_CONTACT_NO, 
                    System.DateTime DOC_JOIN_DATE, 
                    decimal DOC_SALARY, 
                    string DOC_AVAILABLITY, 
                    string DOC_EXPERIENCE, 
                    int Original_DOC_ID, 
                    string Original_DOC_NAME, 
                    string Original_DOC_SPECIALIZATION, 
                    string Original_DOC_CONTACT_NO, 
                    System.DateTime Original_DOC_JOIN_DATE, 
                    decimal Original_DOC_SALARY, 
                    string Original_DOC_AVAILABLITY, 
                    string Original_DOC_EXPERIENCE) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(DOC_ID));
            if ((DOC_NAME == null)) {
                throw new global::System.ArgumentNullException("DOC_NAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(DOC_NAME));
            }
            if ((DOC_SPECIALIZATION == null)) {
                throw new global::System.ArgumentNullException("DOC_SPECIALIZATION");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(DOC_SPECIALIZATION));
            }
            if ((DOC_CONTACT_NO == null)) {
                throw new global::System.ArgumentNullException("DOC_CONTACT_NO");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(DOC_CONTACT_NO));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((System.DateTime)(DOC_JOIN_DATE));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(DOC_SALARY));
            if ((DOC_AVAILABLITY == null)) {
                throw new global::System.ArgumentNullException("DOC_AVAILABLITY");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(DOC_AVAILABLITY));
            }
            if ((DOC_EXPERIENCE == null)) {
                throw new global::System.ArgumentNullException("DOC_EXPERIENCE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(DOC_EXPERIENCE));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_DOC_ID));
            if ((Original_DOC_NAME == null)) {
                throw new global::System.ArgumentNullException("Original_DOC_NAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_DOC_NAME));
            }
            if ((Original_DOC_SPECIALIZATION == null)) {
                throw new global::System.ArgumentNullException("Original_DOC_SPECIALIZATION");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_DOC_SPECIALIZATION));
            }
            if ((Original_DOC_CONTACT_NO == null)) {
                throw new global::System.ArgumentNullException("Original_DOC_CONTACT_NO");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_DOC_CONTACT_NO));
            }
            this.Adapter.UpdateCommand.Parameters[12].Value = ((System.DateTime)(Original_DOC_JOIN_DATE));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((decimal)(Original_DOC_SALARY));
            if ((Original_DOC_AVAILABLITY == null)) {
                throw new global::System.ArgumentNullException("Original_DOC_AVAILABLITY");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_DOC_AVAILABLITY));
            }
            if ((Original_DOC_EXPERIENCE == null)) {
                throw new global::System.ArgumentNullException("Original_DOC_EXPERIENCE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_DOC_EXPERIENCE));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string DOC_NAME, string DOC_SPECIALIZATION, string DOC_CONTACT_NO, System.DateTime DOC_JOIN_DATE, decimal DOC_SALARY, string DOC_AVAILABLITY, string DOC_EXPERIENCE, int Original_DOC_ID, string Original_DOC_NAME, string Original_DOC_SPECIALIZATION, string Original_DOC_CONTACT_NO, System.DateTime Original_DOC_JOIN_DATE, decimal Original_DOC_SALARY, string Original_DOC_AVAILABLITY, string Original_DOC_EXPERIENCE) {
            return this.Update(Original_DOC_ID, DOC_NAME, DOC_SPECIALIZATION, DOC_CONTACT_NO, DOC_JOIN_DATE, DOC_SALARY, DOC_AVAILABLITY, DOC_EXPERIENCE, Original_DOC_ID, Original_DOC_NAME, Original_DOC_SPECIALIZATION, Original_DOC_CONTACT_NO, Original_DOC_JOIN_DATE, Original_DOC_SALARY, Original_DOC_AVAILABLITY, Original_DOC_EXPERIENCE);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PATIENT_DETAILSTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PATIENT_DETAILSTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "PATIENT_DETAILS";
            tableMapping.ColumnMappings.Add("PATIENT_ID", "PATIENT_ID");
            tableMapping.ColumnMappings.Add("PATIENT_NAME", "PATIENT_NAME");
            tableMapping.ColumnMappings.Add("GENDER", "GENDER");
            tableMapping.ColumnMappings.Add("AGE", "AGE");
            tableMapping.ColumnMappings.Add("ADDRESS", "ADDRESS");
            tableMapping.ColumnMappings.Add("PHONE_NO", "PHONE_NO");
            tableMapping.ColumnMappings.Add("ADMIT_DATE", "ADMIT_DATE");
            tableMapping.ColumnMappings.Add("DISCHARGE_DATE", "DISCHARGE_DATE");
            tableMapping.ColumnMappings.Add("WARD_TYPE", "WARD_TYPE");
            tableMapping.ColumnMappings.Add("BED_NO", "BED_NO");
            tableMapping.ColumnMappings.Add("NO_OF_DAYS", "NO_OF_DAYS");
            tableMapping.ColumnMappings.Add("DISEASE_TYPE", "DISEASE_TYPE");
            tableMapping.ColumnMappings.Add("DOCTOR_ID", "DOCTOR_ID");
            tableMapping.ColumnMappings.Add("DOCTOR_NAME", "DOCTOR_NAME");
            tableMapping.ColumnMappings.Add("OPERATION_DATE", "OPERATION_DATE");
            tableMapping.ColumnMappings.Add("OPERATIONTHEATRE_ID", "OPERATIONTHEATRE_ID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[PATIENT_DETAILS] WHERE (([PATIENT_ID] = @Original_PATIENT_ID) AND ([PATIENT_NAME] = @Original_PATIENT_NAME) AND ([GENDER] = @Original_GENDER) AND ([AGE] = @Original_AGE) AND ([ADDRESS] = @Original_ADDRESS) AND ((@IsNull_PHONE_NO = 1 AND [PHONE_NO] IS NULL) OR ([PHONE_NO] = @Original_PHONE_NO)) AND ([ADMIT_DATE] = @Original_ADMIT_DATE) AND ((@IsNull_DISCHARGE_DATE = 1 AND [DISCHARGE_DATE] IS NULL) OR ([DISCHARGE_DATE] = @Original_DISCHARGE_DATE)) AND ([WARD_TYPE] = @Original_WARD_TYPE) AND ([BED_NO] = @Original_BED_NO) AND ([NO_OF_DAYS] = @Original_NO_OF_DAYS) AND ([DISEASE_TYPE] = @Original_DISEASE_TYPE) AND ([DOCTOR_ID] = @Original_DOCTOR_ID) AND ([DOCTOR_NAME] = @Original_DOCTOR_NAME) AND ((@IsNull_OPERATION_DATE = 1 AND [OPERATION_DATE] IS NULL) OR ([OPERATION_DATE] = @Original_OPERATION_DATE)) AND ((@IsNull_OPERATIONTHEATRE_ID = 1 AND [OPERATIONTHEATRE_ID] IS NULL) OR ([OPERATIONTHEATRE_ID] = @Original_OPERATIONTHEATRE_ID)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PATIENT_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PATIENT_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PATIENT_NAME", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PATIENT_NAME", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_GENDER", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GENDER", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AGE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AGE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ADDRESS", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ADDRESS", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PHONE_NO", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PHONE_NO", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PHONE_NO", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PHONE_NO", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ADMIT_DATE", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ADMIT_DATE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DISCHARGE_DATE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DISCHARGE_DATE", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DISCHARGE_DATE", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DISCHARGE_DATE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WARD_TYPE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WARD_TYPE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BED_NO", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BED_NO", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NO_OF_DAYS", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NO_OF_DAYS", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DISEASE_TYPE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DISEASE_TYPE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DOCTOR_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DOCTOR_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DOCTOR_NAME", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DOCTOR_NAME", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OPERATION_DATE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OPERATION_DATE", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OPERATION_DATE", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OPERATION_DATE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OPERATIONTHEATRE_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OPERATIONTHEATRE_ID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OPERATIONTHEATRE_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OPERATIONTHEATRE_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[PATIENT_DETAILS] ([PATIENT_NAME], [GENDER], [AGE], [ADDRESS], [PHONE_NO], [ADMIT_DATE], [DISCHARGE_DATE], [WARD_TYPE], [BED_NO], [NO_OF_DAYS], [DISEASE_TYPE], [DOCTOR_ID], [DOCTOR_NAME], [OPERATION_DATE], [OPERATIONTHEATRE_ID]) VALUES (@PATIENT_NAME, @GENDER, @AGE, @ADDRESS, @PHONE_NO, @ADMIT_DATE, @DISCHARGE_DATE, @WARD_TYPE, @BED_NO, @NO_OF_DAYS, @DISEASE_TYPE, @DOCTOR_ID, @DOCTOR_NAME, @OPERATION_DATE, @OPERATIONTHEATRE_ID);
SELECT PATIENT_ID, PATIENT_NAME, GENDER, AGE, ADDRESS, PHONE_NO, ADMIT_DATE, DISCHARGE_DATE, WARD_TYPE, BED_NO, NO_OF_DAYS, DISEASE_TYPE, DOCTOR_ID, DOCTOR_NAME, OPERATION_DATE, OPERATIONTHEATRE_ID FROM PATIENT_DETAILS WHERE (PATIENT_ID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PATIENT_NAME", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PATIENT_NAME", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GENDER", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GENDER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AGE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AGE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ADDRESS", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ADDRESS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PHONE_NO", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PHONE_NO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ADMIT_DATE", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ADMIT_DATE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DISCHARGE_DATE", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DISCHARGE_DATE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WARD_TYPE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WARD_TYPE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BED_NO", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BED_NO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NO_OF_DAYS", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NO_OF_DAYS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DISEASE_TYPE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DISEASE_TYPE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DOCTOR_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DOCTOR_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DOCTOR_NAME", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DOCTOR_NAME", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OPERATION_DATE", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OPERATION_DATE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OPERATIONTHEATRE_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OPERATIONTHEATRE_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[PATIENT_DETAILS] SET [PATIENT_NAME] = @PATIENT_NAME, [GENDER] = @GE" +
                "NDER, [AGE] = @AGE, [ADDRESS] = @ADDRESS, [PHONE_NO] = @PHONE_NO, [ADMIT_DATE] =" +
                " @ADMIT_DATE, [DISCHARGE_DATE] = @DISCHARGE_DATE, [WARD_TYPE] = @WARD_TYPE, [BED" +
                "_NO] = @BED_NO, [NO_OF_DAYS] = @NO_OF_DAYS, [DISEASE_TYPE] = @DISEASE_TYPE, [DOC" +
                "TOR_ID] = @DOCTOR_ID, [DOCTOR_NAME] = @DOCTOR_NAME, [OPERATION_DATE] = @OPERATIO" +
                "N_DATE, [OPERATIONTHEATRE_ID] = @OPERATIONTHEATRE_ID WHERE (([PATIENT_ID] = @Ori" +
                "ginal_PATIENT_ID) AND ([PATIENT_NAME] = @Original_PATIENT_NAME) AND ([GENDER] = " +
                "@Original_GENDER) AND ([AGE] = @Original_AGE) AND ([ADDRESS] = @Original_ADDRESS" +
                ") AND ((@IsNull_PHONE_NO = 1 AND [PHONE_NO] IS NULL) OR ([PHONE_NO] = @Original_" +
                "PHONE_NO)) AND ([ADMIT_DATE] = @Original_ADMIT_DATE) AND ((@IsNull_DISCHARGE_DAT" +
                "E = 1 AND [DISCHARGE_DATE] IS NULL) OR ([DISCHARGE_DATE] = @Original_DISCHARGE_D" +
                "ATE)) AND ([WARD_TYPE] = @Original_WARD_TYPE) AND ([BED_NO] = @Original_BED_NO) " +
                "AND ([NO_OF_DAYS] = @Original_NO_OF_DAYS) AND ([DISEASE_TYPE] = @Original_DISEAS" +
                "E_TYPE) AND ([DOCTOR_ID] = @Original_DOCTOR_ID) AND ([DOCTOR_NAME] = @Original_D" +
                "OCTOR_NAME) AND ((@IsNull_OPERATION_DATE = 1 AND [OPERATION_DATE] IS NULL) OR ([" +
                "OPERATION_DATE] = @Original_OPERATION_DATE)) AND ((@IsNull_OPERATIONTHEATRE_ID =" +
                " 1 AND [OPERATIONTHEATRE_ID] IS NULL) OR ([OPERATIONTHEATRE_ID] = @Original_OPER" +
                "ATIONTHEATRE_ID)));\r\nSELECT PATIENT_ID, PATIENT_NAME, GENDER, AGE, ADDRESS, PHON" +
                "E_NO, ADMIT_DATE, DISCHARGE_DATE, WARD_TYPE, BED_NO, NO_OF_DAYS, DISEASE_TYPE, D" +
                "OCTOR_ID, DOCTOR_NAME, OPERATION_DATE, OPERATIONTHEATRE_ID FROM PATIENT_DETAILS " +
                "WHERE (PATIENT_ID = @PATIENT_ID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PATIENT_NAME", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PATIENT_NAME", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GENDER", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GENDER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AGE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AGE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ADDRESS", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ADDRESS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PHONE_NO", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PHONE_NO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ADMIT_DATE", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ADMIT_DATE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DISCHARGE_DATE", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DISCHARGE_DATE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WARD_TYPE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WARD_TYPE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BED_NO", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BED_NO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NO_OF_DAYS", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NO_OF_DAYS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DISEASE_TYPE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DISEASE_TYPE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DOCTOR_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DOCTOR_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DOCTOR_NAME", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DOCTOR_NAME", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OPERATION_DATE", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OPERATION_DATE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OPERATIONTHEATRE_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OPERATIONTHEATRE_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PATIENT_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PATIENT_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PATIENT_NAME", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PATIENT_NAME", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_GENDER", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GENDER", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AGE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AGE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ADDRESS", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ADDRESS", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PHONE_NO", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PHONE_NO", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PHONE_NO", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PHONE_NO", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ADMIT_DATE", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ADMIT_DATE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DISCHARGE_DATE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DISCHARGE_DATE", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DISCHARGE_DATE", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DISCHARGE_DATE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WARD_TYPE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WARD_TYPE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BED_NO", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BED_NO", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NO_OF_DAYS", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NO_OF_DAYS", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DISEASE_TYPE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DISEASE_TYPE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DOCTOR_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DOCTOR_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DOCTOR_NAME", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DOCTOR_NAME", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OPERATION_DATE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OPERATION_DATE", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OPERATION_DATE", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OPERATION_DATE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OPERATIONTHEATRE_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OPERATIONTHEATRE_ID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OPERATIONTHEATRE_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OPERATIONTHEATRE_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PATIENT_ID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "PATIENT_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::WindowsFormsApplication1.Properties.Settings.Default.ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT PATIENT_ID, PATIENT_NAME, GENDER, AGE, ADDRESS, PHONE_NO, ADMIT_DATE, DISC" +
                "HARGE_DATE, WARD_TYPE, BED_NO, NO_OF_DAYS, DISEASE_TYPE, DOCTOR_ID, DOCTOR_NAME," +
                " OPERATION_DATE, OPERATIONTHEATRE_ID FROM dbo.PATIENT_DETAILS";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(OPERATION_THEATREDataSet1.PATIENT_DETAILSDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual OPERATION_THEATREDataSet1.PATIENT_DETAILSDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            OPERATION_THEATREDataSet1.PATIENT_DETAILSDataTable dataTable = new OPERATION_THEATREDataSet1.PATIENT_DETAILSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(OPERATION_THEATREDataSet1.PATIENT_DETAILSDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(OPERATION_THEATREDataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "PATIENT_DETAILS");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    int Original_PATIENT_ID, 
                    string Original_PATIENT_NAME, 
                    string Original_GENDER, 
                    int Original_AGE, 
                    string Original_ADDRESS, 
                    string Original_PHONE_NO, 
                    System.DateTime Original_ADMIT_DATE, 
                    global::System.Nullable<global::System.DateTime> Original_DISCHARGE_DATE, 
                    string Original_WARD_TYPE, 
                    int Original_BED_NO, 
                    int Original_NO_OF_DAYS, 
                    string Original_DISEASE_TYPE, 
                    int Original_DOCTOR_ID, 
                    string Original_DOCTOR_NAME, 
                    global::System.Nullable<global::System.DateTime> Original_OPERATION_DATE, 
                    global::System.Nullable<int> Original_OPERATIONTHEATRE_ID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_PATIENT_ID));
            if ((Original_PATIENT_NAME == null)) {
                throw new global::System.ArgumentNullException("Original_PATIENT_NAME");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_PATIENT_NAME));
            }
            if ((Original_GENDER == null)) {
                throw new global::System.ArgumentNullException("Original_GENDER");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_GENDER));
            }
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_AGE));
            if ((Original_ADDRESS == null)) {
                throw new global::System.ArgumentNullException("Original_ADDRESS");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_ADDRESS));
            }
            if ((Original_PHONE_NO == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_PHONE_NO));
            }
            this.Adapter.DeleteCommand.Parameters[7].Value = ((System.DateTime)(Original_ADMIT_DATE));
            if ((Original_DISCHARGE_DATE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((System.DateTime)(Original_DISCHARGE_DATE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((Original_WARD_TYPE == null)) {
                throw new global::System.ArgumentNullException("Original_WARD_TYPE");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_WARD_TYPE));
            }
            this.Adapter.DeleteCommand.Parameters[11].Value = ((int)(Original_BED_NO));
            this.Adapter.DeleteCommand.Parameters[12].Value = ((int)(Original_NO_OF_DAYS));
            if ((Original_DISEASE_TYPE == null)) {
                throw new global::System.ArgumentNullException("Original_DISEASE_TYPE");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((string)(Original_DISEASE_TYPE));
            }
            this.Adapter.DeleteCommand.Parameters[14].Value = ((int)(Original_DOCTOR_ID));
            if ((Original_DOCTOR_NAME == null)) {
                throw new global::System.ArgumentNullException("Original_DOCTOR_NAME");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((string)(Original_DOCTOR_NAME));
            }
            if ((Original_OPERATION_DATE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[17].Value = ((System.DateTime)(Original_OPERATION_DATE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((Original_OPERATIONTHEATRE_ID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[19].Value = ((int)(Original_OPERATIONTHEATRE_ID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string PATIENT_NAME, string GENDER, int AGE, string ADDRESS, string PHONE_NO, System.DateTime ADMIT_DATE, global::System.Nullable<global::System.DateTime> DISCHARGE_DATE, string WARD_TYPE, int BED_NO, int NO_OF_DAYS, string DISEASE_TYPE, int DOCTOR_ID, string DOCTOR_NAME, global::System.Nullable<global::System.DateTime> OPERATION_DATE, global::System.Nullable<int> OPERATIONTHEATRE_ID) {
            if ((PATIENT_NAME == null)) {
                throw new global::System.ArgumentNullException("PATIENT_NAME");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(PATIENT_NAME));
            }
            if ((GENDER == null)) {
                throw new global::System.ArgumentNullException("GENDER");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(GENDER));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(AGE));
            if ((ADDRESS == null)) {
                throw new global::System.ArgumentNullException("ADDRESS");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(ADDRESS));
            }
            if ((PHONE_NO == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(PHONE_NO));
            }
            this.Adapter.InsertCommand.Parameters[5].Value = ((System.DateTime)(ADMIT_DATE));
            if ((DISCHARGE_DATE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((System.DateTime)(DISCHARGE_DATE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((WARD_TYPE == null)) {
                throw new global::System.ArgumentNullException("WARD_TYPE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(WARD_TYPE));
            }
            this.Adapter.InsertCommand.Parameters[8].Value = ((int)(BED_NO));
            this.Adapter.InsertCommand.Parameters[9].Value = ((int)(NO_OF_DAYS));
            if ((DISEASE_TYPE == null)) {
                throw new global::System.ArgumentNullException("DISEASE_TYPE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(DISEASE_TYPE));
            }
            this.Adapter.InsertCommand.Parameters[11].Value = ((int)(DOCTOR_ID));
            if ((DOCTOR_NAME == null)) {
                throw new global::System.ArgumentNullException("DOCTOR_NAME");
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(DOCTOR_NAME));
            }
            if ((OPERATION_DATE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((System.DateTime)(OPERATION_DATE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((OPERATIONTHEATRE_ID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((int)(OPERATIONTHEATRE_ID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string PATIENT_NAME, 
                    string GENDER, 
                    int AGE, 
                    string ADDRESS, 
                    string PHONE_NO, 
                    System.DateTime ADMIT_DATE, 
                    global::System.Nullable<global::System.DateTime> DISCHARGE_DATE, 
                    string WARD_TYPE, 
                    int BED_NO, 
                    int NO_OF_DAYS, 
                    string DISEASE_TYPE, 
                    int DOCTOR_ID, 
                    string DOCTOR_NAME, 
                    global::System.Nullable<global::System.DateTime> OPERATION_DATE, 
                    global::System.Nullable<int> OPERATIONTHEATRE_ID, 
                    int Original_PATIENT_ID, 
                    string Original_PATIENT_NAME, 
                    string Original_GENDER, 
                    int Original_AGE, 
                    string Original_ADDRESS, 
                    string Original_PHONE_NO, 
                    System.DateTime Original_ADMIT_DATE, 
                    global::System.Nullable<global::System.DateTime> Original_DISCHARGE_DATE, 
                    string Original_WARD_TYPE, 
                    int Original_BED_NO, 
                    int Original_NO_OF_DAYS, 
                    string Original_DISEASE_TYPE, 
                    int Original_DOCTOR_ID, 
                    string Original_DOCTOR_NAME, 
                    global::System.Nullable<global::System.DateTime> Original_OPERATION_DATE, 
                    global::System.Nullable<int> Original_OPERATIONTHEATRE_ID, 
                    int PATIENT_ID) {
            if ((PATIENT_NAME == null)) {
                throw new global::System.ArgumentNullException("PATIENT_NAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(PATIENT_NAME));
            }
            if ((GENDER == null)) {
                throw new global::System.ArgumentNullException("GENDER");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(GENDER));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(AGE));
            if ((ADDRESS == null)) {
                throw new global::System.ArgumentNullException("ADDRESS");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(ADDRESS));
            }
            if ((PHONE_NO == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(PHONE_NO));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((System.DateTime)(ADMIT_DATE));
            if ((DISCHARGE_DATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((System.DateTime)(DISCHARGE_DATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((WARD_TYPE == null)) {
                throw new global::System.ArgumentNullException("WARD_TYPE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(WARD_TYPE));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(BED_NO));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(NO_OF_DAYS));
            if ((DISEASE_TYPE == null)) {
                throw new global::System.ArgumentNullException("DISEASE_TYPE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(DISEASE_TYPE));
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(DOCTOR_ID));
            if ((DOCTOR_NAME == null)) {
                throw new global::System.ArgumentNullException("DOCTOR_NAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(DOCTOR_NAME));
            }
            if ((OPERATION_DATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((System.DateTime)(OPERATION_DATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((OPERATIONTHEATRE_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(OPERATIONTHEATRE_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(Original_PATIENT_ID));
            if ((Original_PATIENT_NAME == null)) {
                throw new global::System.ArgumentNullException("Original_PATIENT_NAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_PATIENT_NAME));
            }
            if ((Original_GENDER == null)) {
                throw new global::System.ArgumentNullException("Original_GENDER");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Original_GENDER));
            }
            this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(Original_AGE));
            if ((Original_ADDRESS == null)) {
                throw new global::System.ArgumentNullException("Original_ADDRESS");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_ADDRESS));
            }
            if ((Original_PHONE_NO == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Original_PHONE_NO));
            }
            this.Adapter.UpdateCommand.Parameters[22].Value = ((System.DateTime)(Original_ADMIT_DATE));
            if ((Original_DISCHARGE_DATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[24].Value = ((System.DateTime)(Original_DISCHARGE_DATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((Original_WARD_TYPE == null)) {
                throw new global::System.ArgumentNullException("Original_WARD_TYPE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((string)(Original_WARD_TYPE));
            }
            this.Adapter.UpdateCommand.Parameters[26].Value = ((int)(Original_BED_NO));
            this.Adapter.UpdateCommand.Parameters[27].Value = ((int)(Original_NO_OF_DAYS));
            if ((Original_DISEASE_TYPE == null)) {
                throw new global::System.ArgumentNullException("Original_DISEASE_TYPE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((string)(Original_DISEASE_TYPE));
            }
            this.Adapter.UpdateCommand.Parameters[29].Value = ((int)(Original_DOCTOR_ID));
            if ((Original_DOCTOR_NAME == null)) {
                throw new global::System.ArgumentNullException("Original_DOCTOR_NAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((string)(Original_DOCTOR_NAME));
            }
            if ((Original_OPERATION_DATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[32].Value = ((System.DateTime)(Original_OPERATION_DATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((Original_OPERATIONTHEATRE_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[34].Value = ((int)(Original_OPERATIONTHEATRE_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[35].Value = ((int)(PATIENT_ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string PATIENT_NAME, 
                    string GENDER, 
                    int AGE, 
                    string ADDRESS, 
                    string PHONE_NO, 
                    System.DateTime ADMIT_DATE, 
                    global::System.Nullable<global::System.DateTime> DISCHARGE_DATE, 
                    string WARD_TYPE, 
                    int BED_NO, 
                    int NO_OF_DAYS, 
                    string DISEASE_TYPE, 
                    int DOCTOR_ID, 
                    string DOCTOR_NAME, 
                    global::System.Nullable<global::System.DateTime> OPERATION_DATE, 
                    global::System.Nullable<int> OPERATIONTHEATRE_ID, 
                    int Original_PATIENT_ID, 
                    string Original_PATIENT_NAME, 
                    string Original_GENDER, 
                    int Original_AGE, 
                    string Original_ADDRESS, 
                    string Original_PHONE_NO, 
                    System.DateTime Original_ADMIT_DATE, 
                    global::System.Nullable<global::System.DateTime> Original_DISCHARGE_DATE, 
                    string Original_WARD_TYPE, 
                    int Original_BED_NO, 
                    int Original_NO_OF_DAYS, 
                    string Original_DISEASE_TYPE, 
                    int Original_DOCTOR_ID, 
                    string Original_DOCTOR_NAME, 
                    global::System.Nullable<global::System.DateTime> Original_OPERATION_DATE, 
                    global::System.Nullable<int> Original_OPERATIONTHEATRE_ID) {
            return this.Update(PATIENT_NAME, GENDER, AGE, ADDRESS, PHONE_NO, ADMIT_DATE, DISCHARGE_DATE, WARD_TYPE, BED_NO, NO_OF_DAYS, DISEASE_TYPE, DOCTOR_ID, DOCTOR_NAME, OPERATION_DATE, OPERATIONTHEATRE_ID, Original_PATIENT_ID, Original_PATIENT_NAME, Original_GENDER, Original_AGE, Original_ADDRESS, Original_PHONE_NO, Original_ADMIT_DATE, Original_DISCHARGE_DATE, Original_WARD_TYPE, Original_BED_NO, Original_NO_OF_DAYS, Original_DISEASE_TYPE, Original_DOCTOR_ID, Original_DOCTOR_NAME, Original_OPERATION_DATE, Original_OPERATIONTHEATRE_ID, Original_PATIENT_ID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PATIENTDETAILSTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PATIENTDETAILSTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "PATIENTDETAILS";
            tableMapping.ColumnMappings.Add("PATIENT_ID", "PATIENT_ID");
            tableMapping.ColumnMappings.Add("PATIENT_NAME", "PATIENT_NAME");
            tableMapping.ColumnMappings.Add("GENDER", "GENDER");
            tableMapping.ColumnMappings.Add("AGE", "AGE");
            tableMapping.ColumnMappings.Add("ADDRESS", "ADDRESS");
            tableMapping.ColumnMappings.Add("PHONE_NO", "PHONE_NO");
            tableMapping.ColumnMappings.Add("ADMIT_DATE", "ADMIT_DATE");
            tableMapping.ColumnMappings.Add("DISCHARGE_DATE", "DISCHARGE_DATE");
            tableMapping.ColumnMappings.Add("WARD_TYPE", "WARD_TYPE");
            tableMapping.ColumnMappings.Add("BED_NO", "BED_NO");
            tableMapping.ColumnMappings.Add("NO_OF_DAYS", "NO_OF_DAYS");
            tableMapping.ColumnMappings.Add("DISEASE_TYPE", "DISEASE_TYPE");
            tableMapping.ColumnMappings.Add("DOCTOR_ID", "DOCTOR_ID");
            tableMapping.ColumnMappings.Add("DOCTOR_NAME", "DOCTOR_NAME");
            tableMapping.ColumnMappings.Add("OPERATION_DATE", "OPERATION_DATE");
            tableMapping.ColumnMappings.Add("OPERATION_ID", "OPERATION_ID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[PATIENTDETAILS] WHERE (([PATIENT_ID] = @Original_PATIENT_ID) AND ([PATIENT_NAME] = @Original_PATIENT_NAME) AND ([GENDER] = @Original_GENDER) AND ([AGE] = @Original_AGE) AND ([ADDRESS] = @Original_ADDRESS) AND ((@IsNull_PHONE_NO = 1 AND [PHONE_NO] IS NULL) OR ([PHONE_NO] = @Original_PHONE_NO)) AND ([ADMIT_DATE] = @Original_ADMIT_DATE) AND ((@IsNull_DISCHARGE_DATE = 1 AND [DISCHARGE_DATE] IS NULL) OR ([DISCHARGE_DATE] = @Original_DISCHARGE_DATE)) AND ([WARD_TYPE] = @Original_WARD_TYPE) AND ([BED_NO] = @Original_BED_NO) AND ([NO_OF_DAYS] = @Original_NO_OF_DAYS) AND ([DISEASE_TYPE] = @Original_DISEASE_TYPE) AND ([DOCTOR_ID] = @Original_DOCTOR_ID) AND ([DOCTOR_NAME] = @Original_DOCTOR_NAME) AND ((@IsNull_OPERATION_DATE = 1 AND [OPERATION_DATE] IS NULL) OR ([OPERATION_DATE] = @Original_OPERATION_DATE)) AND ((@IsNull_OPERATION_ID = 1 AND [OPERATION_ID] IS NULL) OR ([OPERATION_ID] = @Original_OPERATION_ID)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PATIENT_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PATIENT_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PATIENT_NAME", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PATIENT_NAME", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_GENDER", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GENDER", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AGE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AGE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ADDRESS", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ADDRESS", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PHONE_NO", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PHONE_NO", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PHONE_NO", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PHONE_NO", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ADMIT_DATE", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ADMIT_DATE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DISCHARGE_DATE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DISCHARGE_DATE", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DISCHARGE_DATE", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DISCHARGE_DATE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WARD_TYPE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WARD_TYPE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BED_NO", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BED_NO", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NO_OF_DAYS", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NO_OF_DAYS", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DISEASE_TYPE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DISEASE_TYPE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DOCTOR_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DOCTOR_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DOCTOR_NAME", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DOCTOR_NAME", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OPERATION_DATE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OPERATION_DATE", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OPERATION_DATE", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OPERATION_DATE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OPERATION_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OPERATION_ID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OPERATION_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OPERATION_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[PATIENTDETAILS] ([PATIENT_NAME], [GENDER], [AGE], [ADDRESS], [PHONE_NO], [ADMIT_DATE], [DISCHARGE_DATE], [WARD_TYPE], [BED_NO], [NO_OF_DAYS], [DISEASE_TYPE], [DOCTOR_ID], [DOCTOR_NAME], [OPERATION_DATE], [OPERATION_ID]) VALUES (@PATIENT_NAME, @GENDER, @AGE, @ADDRESS, @PHONE_NO, @ADMIT_DATE, @DISCHARGE_DATE, @WARD_TYPE, @BED_NO, @NO_OF_DAYS, @DISEASE_TYPE, @DOCTOR_ID, @DOCTOR_NAME, @OPERATION_DATE, @OPERATION_ID);
SELECT PATIENT_ID, PATIENT_NAME, GENDER, AGE, ADDRESS, PHONE_NO, ADMIT_DATE, DISCHARGE_DATE, WARD_TYPE, BED_NO, NO_OF_DAYS, DISEASE_TYPE, DOCTOR_ID, DOCTOR_NAME, OPERATION_DATE, OPERATION_ID FROM PATIENTDETAILS WHERE (PATIENT_ID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PATIENT_NAME", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PATIENT_NAME", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GENDER", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GENDER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AGE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AGE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ADDRESS", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ADDRESS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PHONE_NO", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PHONE_NO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ADMIT_DATE", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ADMIT_DATE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DISCHARGE_DATE", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DISCHARGE_DATE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WARD_TYPE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WARD_TYPE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BED_NO", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BED_NO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NO_OF_DAYS", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NO_OF_DAYS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DISEASE_TYPE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DISEASE_TYPE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DOCTOR_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DOCTOR_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DOCTOR_NAME", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DOCTOR_NAME", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OPERATION_DATE", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OPERATION_DATE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OPERATION_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OPERATION_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[PATIENTDETAILS] SET [PATIENT_NAME] = @PATIENT_NAME, [GENDER] = @GEN" +
                "DER, [AGE] = @AGE, [ADDRESS] = @ADDRESS, [PHONE_NO] = @PHONE_NO, [ADMIT_DATE] = " +
                "@ADMIT_DATE, [DISCHARGE_DATE] = @DISCHARGE_DATE, [WARD_TYPE] = @WARD_TYPE, [BED_" +
                "NO] = @BED_NO, [NO_OF_DAYS] = @NO_OF_DAYS, [DISEASE_TYPE] = @DISEASE_TYPE, [DOCT" +
                "OR_ID] = @DOCTOR_ID, [DOCTOR_NAME] = @DOCTOR_NAME, [OPERATION_DATE] = @OPERATION" +
                "_DATE, [OPERATION_ID] = @OPERATION_ID WHERE (([PATIENT_ID] = @Original_PATIENT_I" +
                "D) AND ([PATIENT_NAME] = @Original_PATIENT_NAME) AND ([GENDER] = @Original_GENDE" +
                "R) AND ([AGE] = @Original_AGE) AND ([ADDRESS] = @Original_ADDRESS) AND ((@IsNull" +
                "_PHONE_NO = 1 AND [PHONE_NO] IS NULL) OR ([PHONE_NO] = @Original_PHONE_NO)) AND " +
                "([ADMIT_DATE] = @Original_ADMIT_DATE) AND ((@IsNull_DISCHARGE_DATE = 1 AND [DISC" +
                "HARGE_DATE] IS NULL) OR ([DISCHARGE_DATE] = @Original_DISCHARGE_DATE)) AND ([WAR" +
                "D_TYPE] = @Original_WARD_TYPE) AND ([BED_NO] = @Original_BED_NO) AND ([NO_OF_DAY" +
                "S] = @Original_NO_OF_DAYS) AND ([DISEASE_TYPE] = @Original_DISEASE_TYPE) AND ([D" +
                "OCTOR_ID] = @Original_DOCTOR_ID) AND ([DOCTOR_NAME] = @Original_DOCTOR_NAME) AND" +
                " ((@IsNull_OPERATION_DATE = 1 AND [OPERATION_DATE] IS NULL) OR ([OPERATION_DATE]" +
                " = @Original_OPERATION_DATE)) AND ((@IsNull_OPERATION_ID = 1 AND [OPERATION_ID] " +
                "IS NULL) OR ([OPERATION_ID] = @Original_OPERATION_ID)));\r\nSELECT PATIENT_ID, PAT" +
                "IENT_NAME, GENDER, AGE, ADDRESS, PHONE_NO, ADMIT_DATE, DISCHARGE_DATE, WARD_TYPE" +
                ", BED_NO, NO_OF_DAYS, DISEASE_TYPE, DOCTOR_ID, DOCTOR_NAME, OPERATION_DATE, OPER" +
                "ATION_ID FROM PATIENTDETAILS WHERE (PATIENT_ID = @PATIENT_ID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PATIENT_NAME", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PATIENT_NAME", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GENDER", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GENDER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AGE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AGE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ADDRESS", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ADDRESS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PHONE_NO", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PHONE_NO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ADMIT_DATE", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ADMIT_DATE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DISCHARGE_DATE", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DISCHARGE_DATE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WARD_TYPE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WARD_TYPE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BED_NO", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BED_NO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NO_OF_DAYS", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NO_OF_DAYS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DISEASE_TYPE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DISEASE_TYPE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DOCTOR_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DOCTOR_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DOCTOR_NAME", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DOCTOR_NAME", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OPERATION_DATE", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OPERATION_DATE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OPERATION_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OPERATION_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PATIENT_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PATIENT_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PATIENT_NAME", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PATIENT_NAME", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_GENDER", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GENDER", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AGE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AGE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ADDRESS", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ADDRESS", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PHONE_NO", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PHONE_NO", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PHONE_NO", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PHONE_NO", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ADMIT_DATE", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ADMIT_DATE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DISCHARGE_DATE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DISCHARGE_DATE", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DISCHARGE_DATE", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DISCHARGE_DATE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WARD_TYPE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WARD_TYPE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BED_NO", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BED_NO", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NO_OF_DAYS", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NO_OF_DAYS", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DISEASE_TYPE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DISEASE_TYPE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DOCTOR_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DOCTOR_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DOCTOR_NAME", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DOCTOR_NAME", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OPERATION_DATE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OPERATION_DATE", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OPERATION_DATE", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OPERATION_DATE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_OPERATION_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OPERATION_ID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OPERATION_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OPERATION_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PATIENT_ID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "PATIENT_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::WindowsFormsApplication1.Properties.Settings.Default.ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT PATIENT_ID, PATIENT_NAME, GENDER, AGE, ADDRESS, PHONE_NO, ADMIT_DATE, DISC" +
                "HARGE_DATE, WARD_TYPE, BED_NO, NO_OF_DAYS, DISEASE_TYPE, DOCTOR_ID, DOCTOR_NAME," +
                " OPERATION_DATE, OPERATION_ID FROM dbo.PATIENTDETAILS";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(OPERATION_THEATREDataSet1.PATIENTDETAILSDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual OPERATION_THEATREDataSet1.PATIENTDETAILSDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            OPERATION_THEATREDataSet1.PATIENTDETAILSDataTable dataTable = new OPERATION_THEATREDataSet1.PATIENTDETAILSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(OPERATION_THEATREDataSet1.PATIENTDETAILSDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(OPERATION_THEATREDataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "PATIENTDETAILS");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    int Original_PATIENT_ID, 
                    string Original_PATIENT_NAME, 
                    string Original_GENDER, 
                    int Original_AGE, 
                    string Original_ADDRESS, 
                    string Original_PHONE_NO, 
                    System.DateTime Original_ADMIT_DATE, 
                    global::System.Nullable<global::System.DateTime> Original_DISCHARGE_DATE, 
                    string Original_WARD_TYPE, 
                    int Original_BED_NO, 
                    int Original_NO_OF_DAYS, 
                    string Original_DISEASE_TYPE, 
                    int Original_DOCTOR_ID, 
                    string Original_DOCTOR_NAME, 
                    global::System.Nullable<global::System.DateTime> Original_OPERATION_DATE, 
                    global::System.Nullable<int> Original_OPERATION_ID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_PATIENT_ID));
            if ((Original_PATIENT_NAME == null)) {
                throw new global::System.ArgumentNullException("Original_PATIENT_NAME");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_PATIENT_NAME));
            }
            if ((Original_GENDER == null)) {
                throw new global::System.ArgumentNullException("Original_GENDER");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_GENDER));
            }
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_AGE));
            if ((Original_ADDRESS == null)) {
                throw new global::System.ArgumentNullException("Original_ADDRESS");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_ADDRESS));
            }
            if ((Original_PHONE_NO == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_PHONE_NO));
            }
            this.Adapter.DeleteCommand.Parameters[7].Value = ((System.DateTime)(Original_ADMIT_DATE));
            if ((Original_DISCHARGE_DATE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((System.DateTime)(Original_DISCHARGE_DATE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((Original_WARD_TYPE == null)) {
                throw new global::System.ArgumentNullException("Original_WARD_TYPE");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_WARD_TYPE));
            }
            this.Adapter.DeleteCommand.Parameters[11].Value = ((int)(Original_BED_NO));
            this.Adapter.DeleteCommand.Parameters[12].Value = ((int)(Original_NO_OF_DAYS));
            if ((Original_DISEASE_TYPE == null)) {
                throw new global::System.ArgumentNullException("Original_DISEASE_TYPE");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((string)(Original_DISEASE_TYPE));
            }
            this.Adapter.DeleteCommand.Parameters[14].Value = ((int)(Original_DOCTOR_ID));
            if ((Original_DOCTOR_NAME == null)) {
                throw new global::System.ArgumentNullException("Original_DOCTOR_NAME");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((string)(Original_DOCTOR_NAME));
            }
            if ((Original_OPERATION_DATE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[17].Value = ((System.DateTime)(Original_OPERATION_DATE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((Original_OPERATION_ID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[19].Value = ((int)(Original_OPERATION_ID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string PATIENT_NAME, string GENDER, int AGE, string ADDRESS, string PHONE_NO, System.DateTime ADMIT_DATE, global::System.Nullable<global::System.DateTime> DISCHARGE_DATE, string WARD_TYPE, int BED_NO, int NO_OF_DAYS, string DISEASE_TYPE, int DOCTOR_ID, string DOCTOR_NAME, global::System.Nullable<global::System.DateTime> OPERATION_DATE, global::System.Nullable<int> OPERATION_ID) {
            if ((PATIENT_NAME == null)) {
                throw new global::System.ArgumentNullException("PATIENT_NAME");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(PATIENT_NAME));
            }
            if ((GENDER == null)) {
                throw new global::System.ArgumentNullException("GENDER");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(GENDER));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(AGE));
            if ((ADDRESS == null)) {
                throw new global::System.ArgumentNullException("ADDRESS");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(ADDRESS));
            }
            if ((PHONE_NO == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(PHONE_NO));
            }
            this.Adapter.InsertCommand.Parameters[5].Value = ((System.DateTime)(ADMIT_DATE));
            if ((DISCHARGE_DATE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((System.DateTime)(DISCHARGE_DATE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((WARD_TYPE == null)) {
                throw new global::System.ArgumentNullException("WARD_TYPE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(WARD_TYPE));
            }
            this.Adapter.InsertCommand.Parameters[8].Value = ((int)(BED_NO));
            this.Adapter.InsertCommand.Parameters[9].Value = ((int)(NO_OF_DAYS));
            if ((DISEASE_TYPE == null)) {
                throw new global::System.ArgumentNullException("DISEASE_TYPE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(DISEASE_TYPE));
            }
            this.Adapter.InsertCommand.Parameters[11].Value = ((int)(DOCTOR_ID));
            if ((DOCTOR_NAME == null)) {
                throw new global::System.ArgumentNullException("DOCTOR_NAME");
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(DOCTOR_NAME));
            }
            if ((OPERATION_DATE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((System.DateTime)(OPERATION_DATE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((OPERATION_ID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((int)(OPERATION_ID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string PATIENT_NAME, 
                    string GENDER, 
                    int AGE, 
                    string ADDRESS, 
                    string PHONE_NO, 
                    System.DateTime ADMIT_DATE, 
                    global::System.Nullable<global::System.DateTime> DISCHARGE_DATE, 
                    string WARD_TYPE, 
                    int BED_NO, 
                    int NO_OF_DAYS, 
                    string DISEASE_TYPE, 
                    int DOCTOR_ID, 
                    string DOCTOR_NAME, 
                    global::System.Nullable<global::System.DateTime> OPERATION_DATE, 
                    global::System.Nullable<int> OPERATION_ID, 
                    int Original_PATIENT_ID, 
                    string Original_PATIENT_NAME, 
                    string Original_GENDER, 
                    int Original_AGE, 
                    string Original_ADDRESS, 
                    string Original_PHONE_NO, 
                    System.DateTime Original_ADMIT_DATE, 
                    global::System.Nullable<global::System.DateTime> Original_DISCHARGE_DATE, 
                    string Original_WARD_TYPE, 
                    int Original_BED_NO, 
                    int Original_NO_OF_DAYS, 
                    string Original_DISEASE_TYPE, 
                    int Original_DOCTOR_ID, 
                    string Original_DOCTOR_NAME, 
                    global::System.Nullable<global::System.DateTime> Original_OPERATION_DATE, 
                    global::System.Nullable<int> Original_OPERATION_ID, 
                    int PATIENT_ID) {
            if ((PATIENT_NAME == null)) {
                throw new global::System.ArgumentNullException("PATIENT_NAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(PATIENT_NAME));
            }
            if ((GENDER == null)) {
                throw new global::System.ArgumentNullException("GENDER");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(GENDER));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(AGE));
            if ((ADDRESS == null)) {
                throw new global::System.ArgumentNullException("ADDRESS");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(ADDRESS));
            }
            if ((PHONE_NO == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(PHONE_NO));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((System.DateTime)(ADMIT_DATE));
            if ((DISCHARGE_DATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((System.DateTime)(DISCHARGE_DATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((WARD_TYPE == null)) {
                throw new global::System.ArgumentNullException("WARD_TYPE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(WARD_TYPE));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(BED_NO));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(NO_OF_DAYS));
            if ((DISEASE_TYPE == null)) {
                throw new global::System.ArgumentNullException("DISEASE_TYPE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(DISEASE_TYPE));
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(DOCTOR_ID));
            if ((DOCTOR_NAME == null)) {
                throw new global::System.ArgumentNullException("DOCTOR_NAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(DOCTOR_NAME));
            }
            if ((OPERATION_DATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((System.DateTime)(OPERATION_DATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((OPERATION_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(OPERATION_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(Original_PATIENT_ID));
            if ((Original_PATIENT_NAME == null)) {
                throw new global::System.ArgumentNullException("Original_PATIENT_NAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_PATIENT_NAME));
            }
            if ((Original_GENDER == null)) {
                throw new global::System.ArgumentNullException("Original_GENDER");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Original_GENDER));
            }
            this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(Original_AGE));
            if ((Original_ADDRESS == null)) {
                throw new global::System.ArgumentNullException("Original_ADDRESS");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_ADDRESS));
            }
            if ((Original_PHONE_NO == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Original_PHONE_NO));
            }
            this.Adapter.UpdateCommand.Parameters[22].Value = ((System.DateTime)(Original_ADMIT_DATE));
            if ((Original_DISCHARGE_DATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[24].Value = ((System.DateTime)(Original_DISCHARGE_DATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((Original_WARD_TYPE == null)) {
                throw new global::System.ArgumentNullException("Original_WARD_TYPE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((string)(Original_WARD_TYPE));
            }
            this.Adapter.UpdateCommand.Parameters[26].Value = ((int)(Original_BED_NO));
            this.Adapter.UpdateCommand.Parameters[27].Value = ((int)(Original_NO_OF_DAYS));
            if ((Original_DISEASE_TYPE == null)) {
                throw new global::System.ArgumentNullException("Original_DISEASE_TYPE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((string)(Original_DISEASE_TYPE));
            }
            this.Adapter.UpdateCommand.Parameters[29].Value = ((int)(Original_DOCTOR_ID));
            if ((Original_DOCTOR_NAME == null)) {
                throw new global::System.ArgumentNullException("Original_DOCTOR_NAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((string)(Original_DOCTOR_NAME));
            }
            if ((Original_OPERATION_DATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[32].Value = ((System.DateTime)(Original_OPERATION_DATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((Original_OPERATION_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[34].Value = ((int)(Original_OPERATION_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[35].Value = ((int)(PATIENT_ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string PATIENT_NAME, 
                    string GENDER, 
                    int AGE, 
                    string ADDRESS, 
                    string PHONE_NO, 
                    System.DateTime ADMIT_DATE, 
                    global::System.Nullable<global::System.DateTime> DISCHARGE_DATE, 
                    string WARD_TYPE, 
                    int BED_NO, 
                    int NO_OF_DAYS, 
                    string DISEASE_TYPE, 
                    int DOCTOR_ID, 
                    string DOCTOR_NAME, 
                    global::System.Nullable<global::System.DateTime> OPERATION_DATE, 
                    global::System.Nullable<int> OPERATION_ID, 
                    int Original_PATIENT_ID, 
                    string Original_PATIENT_NAME, 
                    string Original_GENDER, 
                    int Original_AGE, 
                    string Original_ADDRESS, 
                    string Original_PHONE_NO, 
                    System.DateTime Original_ADMIT_DATE, 
                    global::System.Nullable<global::System.DateTime> Original_DISCHARGE_DATE, 
                    string Original_WARD_TYPE, 
                    int Original_BED_NO, 
                    int Original_NO_OF_DAYS, 
                    string Original_DISEASE_TYPE, 
                    int Original_DOCTOR_ID, 
                    string Original_DOCTOR_NAME, 
                    global::System.Nullable<global::System.DateTime> Original_OPERATION_DATE, 
                    global::System.Nullable<int> Original_OPERATION_ID) {
            return this.Update(PATIENT_NAME, GENDER, AGE, ADDRESS, PHONE_NO, ADMIT_DATE, DISCHARGE_DATE, WARD_TYPE, BED_NO, NO_OF_DAYS, DISEASE_TYPE, DOCTOR_ID, DOCTOR_NAME, OPERATION_DATE, OPERATION_ID, Original_PATIENT_ID, Original_PATIENT_NAME, Original_GENDER, Original_AGE, Original_ADDRESS, Original_PHONE_NO, Original_ADMIT_DATE, Original_DISCHARGE_DATE, Original_WARD_TYPE, Original_BED_NO, Original_NO_OF_DAYS, Original_DISEASE_TYPE, Original_DOCTOR_ID, Original_DOCTOR_NAME, Original_OPERATION_DATE, Original_OPERATION_ID, Original_PATIENT_ID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class POST_OPERATIONTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public POST_OPERATIONTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "POST_OPERATION";
            tableMapping.ColumnMappings.Add("PATIENT_ID", "PATIENT_ID");
            tableMapping.ColumnMappings.Add("OPERATION_STATUS", "OPERATION_STATUS");
            tableMapping.ColumnMappings.Add("INFECTION_STATUS", "INFECTION_STATUS");
            tableMapping.ColumnMappings.Add("BLOOD_PRESSURE", "BLOOD_PRESSURE");
            tableMapping.ColumnMappings.Add("CHECK_BLOOD_GROUP", "CHECK_BLOOD_GROUP");
            tableMapping.ColumnMappings.Add("SUGAR_LEVEL_CHECKUP", "SUGAR_LEVEL_CHECKUP");
            tableMapping.ColumnMappings.Add("POST_ANESTHETIC_CHECK", "POST_ANESTHETIC_CHECK");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[POST_OPERATION] ([PATIENT_ID], [OPERATION_STATUS], [INFECTION_STATUS], [BLOOD_PRESSURE], [CHECK_BLOOD_GROUP], [SUGAR_LEVEL_CHECKUP], [POST_ANESTHETIC_CHECK]) VALUES (@PATIENT_ID, @OPERATION_STATUS, @INFECTION_STATUS, @BLOOD_PRESSURE, @CHECK_BLOOD_GROUP, @SUGAR_LEVEL_CHECKUP, @POST_ANESTHETIC_CHECK)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PATIENT_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PATIENT_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OPERATION_STATUS", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OPERATION_STATUS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@INFECTION_STATUS", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "INFECTION_STATUS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BLOOD_PRESSURE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BLOOD_PRESSURE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CHECK_BLOOD_GROUP", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CHECK_BLOOD_GROUP", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SUGAR_LEVEL_CHECKUP", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SUGAR_LEVEL_CHECKUP", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@POST_ANESTHETIC_CHECK", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "POST_ANESTHETIC_CHECK", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::WindowsFormsApplication1.Properties.Settings.Default.ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT PATIENT_ID, OPERATION_STATUS, INFECTION_STATUS, BLOOD_PRESSURE, CHECK_BLOO" +
                "D_GROUP, SUGAR_LEVEL_CHECKUP, POST_ANESTHETIC_CHECK FROM dbo.POST_OPERATION";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(OPERATION_THEATREDataSet1.POST_OPERATIONDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual OPERATION_THEATREDataSet1.POST_OPERATIONDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            OPERATION_THEATREDataSet1.POST_OPERATIONDataTable dataTable = new OPERATION_THEATREDataSet1.POST_OPERATIONDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(OPERATION_THEATREDataSet1.POST_OPERATIONDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(OPERATION_THEATREDataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "POST_OPERATION");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(global::System.Nullable<int> PATIENT_ID, string OPERATION_STATUS, string INFECTION_STATUS, string BLOOD_PRESSURE, string CHECK_BLOOD_GROUP, string SUGAR_LEVEL_CHECKUP, string POST_ANESTHETIC_CHECK) {
            if ((PATIENT_ID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((int)(PATIENT_ID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((OPERATION_STATUS == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(OPERATION_STATUS));
            }
            if ((INFECTION_STATUS == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(INFECTION_STATUS));
            }
            if ((BLOOD_PRESSURE == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(BLOOD_PRESSURE));
            }
            if ((CHECK_BLOOD_GROUP == null)) {
                throw new global::System.ArgumentNullException("CHECK_BLOOD_GROUP");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(CHECK_BLOOD_GROUP));
            }
            if ((SUGAR_LEVEL_CHECKUP == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(SUGAR_LEVEL_CHECKUP));
            }
            if ((POST_ANESTHETIC_CHECK == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(POST_ANESTHETIC_CHECK));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PRE_OPERATIONTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PRE_OPERATIONTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "PRE_OPERATION";
            tableMapping.ColumnMappings.Add("PATIENT_ID", "PATIENT_ID");
            tableMapping.ColumnMappings.Add("BLOOD_PRESSURE", "BLOOD_PRESSURE");
            tableMapping.ColumnMappings.Add("CHECK_BLOOD_GROUP", "CHECK_BLOOD_GROUP");
            tableMapping.ColumnMappings.Add("SUGAR_LEVEL_CHECKUP", "SUGAR_LEVEL_CHECKUP");
            tableMapping.ColumnMappings.Add("PRE_ANESTHETIC_CHECK", "PRE_ANESTHETIC_CHECK");
            tableMapping.ColumnMappings.Add("PULSE_RATE", "PULSE_RATE");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[PRE_OPERATION] ([PATIENT_ID], [BLOOD_PRESSURE], [CHECK_BLOOD_GROUP], [SUGAR_LEVEL_CHECKUP], [PRE_ANESTHETIC_CHECK], [PULSE_RATE]) VALUES (@PATIENT_ID, @BLOOD_PRESSURE, @CHECK_BLOOD_GROUP, @SUGAR_LEVEL_CHECKUP, @PRE_ANESTHETIC_CHECK, @PULSE_RATE)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PATIENT_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PATIENT_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BLOOD_PRESSURE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BLOOD_PRESSURE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CHECK_BLOOD_GROUP", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CHECK_BLOOD_GROUP", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SUGAR_LEVEL_CHECKUP", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SUGAR_LEVEL_CHECKUP", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PRE_ANESTHETIC_CHECK", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PRE_ANESTHETIC_CHECK", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PULSE_RATE", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PULSE_RATE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::WindowsFormsApplication1.Properties.Settings.Default.ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT PATIENT_ID, BLOOD_PRESSURE, CHECK_BLOOD_GROUP, SUGAR_LEVEL_CHECKUP, PRE_AN" +
                "ESTHETIC_CHECK, PULSE_RATE FROM dbo.PRE_OPERATION";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(OPERATION_THEATREDataSet1.PRE_OPERATIONDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual OPERATION_THEATREDataSet1.PRE_OPERATIONDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            OPERATION_THEATREDataSet1.PRE_OPERATIONDataTable dataTable = new OPERATION_THEATREDataSet1.PRE_OPERATIONDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(OPERATION_THEATREDataSet1.PRE_OPERATIONDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(OPERATION_THEATREDataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "PRE_OPERATION");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int PATIENT_ID, string BLOOD_PRESSURE, string CHECK_BLOOD_GROUP, string SUGAR_LEVEL_CHECKUP, string PRE_ANESTHETIC_CHECK, string PULSE_RATE) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(PATIENT_ID));
            if ((BLOOD_PRESSURE == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(BLOOD_PRESSURE));
            }
            if ((CHECK_BLOOD_GROUP == null)) {
                throw new global::System.ArgumentNullException("CHECK_BLOOD_GROUP");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(CHECK_BLOOD_GROUP));
            }
            if ((SUGAR_LEVEL_CHECKUP == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(SUGAR_LEVEL_CHECKUP));
            }
            if ((PRE_ANESTHETIC_CHECK == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(PRE_ANESTHETIC_CHECK));
            }
            if ((PULSE_RATE == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(PULSE_RATE));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class STAFF_DETAILSTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public STAFF_DETAILSTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "STAFF_DETAILS";
            tableMapping.ColumnMappings.Add("STAFF_ID", "STAFF_ID");
            tableMapping.ColumnMappings.Add("STAFF_NAME", "STAFF_NAME");
            tableMapping.ColumnMappings.Add("PHONE_NO", "PHONE_NO");
            tableMapping.ColumnMappings.Add("DEPARTMENT_NAME", "DEPARTMENT_NAME");
            tableMapping.ColumnMappings.Add("STAFF_DESIGNATION", "STAFF_DESIGNATION");
            tableMapping.ColumnMappings.Add("SHIFT_TIMINGS", "SHIFT_TIMINGS");
            tableMapping.ColumnMappings.Add("JOINING_DATE", "JOINING_DATE");
            tableMapping.ColumnMappings.Add("SALARY", "SALARY");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[STAFF_DETAILS] WHERE (([STAFF_ID] = @Original_STAFF_ID) AND ([STAFF_NAME] = @Original_STAFF_NAME) AND ([PHONE_NO] = @Original_PHONE_NO) AND ([DEPARTMENT_NAME] = @Original_DEPARTMENT_NAME) AND ([STAFF_DESIGNATION] = @Original_STAFF_DESIGNATION) AND ([SHIFT_TIMINGS] = @Original_SHIFT_TIMINGS) AND ([JOINING_DATE] = @Original_JOINING_DATE) AND ([SALARY] = @Original_SALARY))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_STAFF_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "STAFF_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_STAFF_NAME", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "STAFF_NAME", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PHONE_NO", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PHONE_NO", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DEPARTMENT_NAME", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DEPARTMENT_NAME", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_STAFF_DESIGNATION", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "STAFF_DESIGNATION", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SHIFT_TIMINGS", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SHIFT_TIMINGS", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_JOINING_DATE", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "JOINING_DATE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SALARY", global::System.Data.SqlDbType.SmallMoney, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SALARY", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[STAFF_DETAILS] ([STAFF_NAME], [PHONE_NO], [DEPARTMENT_NAME], [STAFF_DESIGNATION], [SHIFT_TIMINGS], [JOINING_DATE], [SALARY]) VALUES (@STAFF_NAME, @PHONE_NO, @DEPARTMENT_NAME, @STAFF_DESIGNATION, @SHIFT_TIMINGS, @JOINING_DATE, @SALARY);
SELECT STAFF_ID, STAFF_NAME, PHONE_NO, DEPARTMENT_NAME, STAFF_DESIGNATION, SHIFT_TIMINGS, JOINING_DATE, SALARY FROM STAFF_DETAILS WHERE (STAFF_ID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@STAFF_NAME", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "STAFF_NAME", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PHONE_NO", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PHONE_NO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DEPARTMENT_NAME", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DEPARTMENT_NAME", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@STAFF_DESIGNATION", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "STAFF_DESIGNATION", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SHIFT_TIMINGS", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SHIFT_TIMINGS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@JOINING_DATE", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "JOINING_DATE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SALARY", global::System.Data.SqlDbType.SmallMoney, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SALARY", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[STAFF_DETAILS] SET [STAFF_NAME] = @STAFF_NAME, [PHONE_NO] = @PHONE_NO, [DEPARTMENT_NAME] = @DEPARTMENT_NAME, [STAFF_DESIGNATION] = @STAFF_DESIGNATION, [SHIFT_TIMINGS] = @SHIFT_TIMINGS, [JOINING_DATE] = @JOINING_DATE, [SALARY] = @SALARY WHERE (([STAFF_ID] = @Original_STAFF_ID) AND ([STAFF_NAME] = @Original_STAFF_NAME) AND ([PHONE_NO] = @Original_PHONE_NO) AND ([DEPARTMENT_NAME] = @Original_DEPARTMENT_NAME) AND ([STAFF_DESIGNATION] = @Original_STAFF_DESIGNATION) AND ([SHIFT_TIMINGS] = @Original_SHIFT_TIMINGS) AND ([JOINING_DATE] = @Original_JOINING_DATE) AND ([SALARY] = @Original_SALARY));
SELECT STAFF_ID, STAFF_NAME, PHONE_NO, DEPARTMENT_NAME, STAFF_DESIGNATION, SHIFT_TIMINGS, JOINING_DATE, SALARY FROM STAFF_DETAILS WHERE (STAFF_ID = @STAFF_ID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@STAFF_NAME", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "STAFF_NAME", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PHONE_NO", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PHONE_NO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DEPARTMENT_NAME", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DEPARTMENT_NAME", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@STAFF_DESIGNATION", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "STAFF_DESIGNATION", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SHIFT_TIMINGS", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SHIFT_TIMINGS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@JOINING_DATE", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "JOINING_DATE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SALARY", global::System.Data.SqlDbType.SmallMoney, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SALARY", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_STAFF_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "STAFF_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_STAFF_NAME", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "STAFF_NAME", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PHONE_NO", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PHONE_NO", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DEPARTMENT_NAME", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DEPARTMENT_NAME", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_STAFF_DESIGNATION", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "STAFF_DESIGNATION", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SHIFT_TIMINGS", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SHIFT_TIMINGS", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_JOINING_DATE", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "JOINING_DATE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SALARY", global::System.Data.SqlDbType.SmallMoney, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SALARY", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@STAFF_ID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "STAFF_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::WindowsFormsApplication1.Properties.Settings.Default.ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT STAFF_ID, STAFF_NAME, PHONE_NO, DEPARTMENT_NAME, STAFF_DESIGNATION, SHIFT_" +
                "TIMINGS, JOINING_DATE, SALARY FROM dbo.STAFF_DETAILS";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(OPERATION_THEATREDataSet1.STAFF_DETAILSDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual OPERATION_THEATREDataSet1.STAFF_DETAILSDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            OPERATION_THEATREDataSet1.STAFF_DETAILSDataTable dataTable = new OPERATION_THEATREDataSet1.STAFF_DETAILSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(OPERATION_THEATREDataSet1.STAFF_DETAILSDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(OPERATION_THEATREDataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "STAFF_DETAILS");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_STAFF_ID, string Original_STAFF_NAME, string Original_PHONE_NO, string Original_DEPARTMENT_NAME, string Original_STAFF_DESIGNATION, string Original_SHIFT_TIMINGS, System.DateTime Original_JOINING_DATE, decimal Original_SALARY) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_STAFF_ID));
            if ((Original_STAFF_NAME == null)) {
                throw new global::System.ArgumentNullException("Original_STAFF_NAME");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_STAFF_NAME));
            }
            if ((Original_PHONE_NO == null)) {
                throw new global::System.ArgumentNullException("Original_PHONE_NO");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_PHONE_NO));
            }
            if ((Original_DEPARTMENT_NAME == null)) {
                throw new global::System.ArgumentNullException("Original_DEPARTMENT_NAME");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_DEPARTMENT_NAME));
            }
            if ((Original_STAFF_DESIGNATION == null)) {
                throw new global::System.ArgumentNullException("Original_STAFF_DESIGNATION");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_STAFF_DESIGNATION));
            }
            if ((Original_SHIFT_TIMINGS == null)) {
                throw new global::System.ArgumentNullException("Original_SHIFT_TIMINGS");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_SHIFT_TIMINGS));
            }
            this.Adapter.DeleteCommand.Parameters[6].Value = ((System.DateTime)(Original_JOINING_DATE));
            this.Adapter.DeleteCommand.Parameters[7].Value = ((decimal)(Original_SALARY));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string STAFF_NAME, string PHONE_NO, string DEPARTMENT_NAME, string STAFF_DESIGNATION, string SHIFT_TIMINGS, System.DateTime JOINING_DATE, decimal SALARY) {
            if ((STAFF_NAME == null)) {
                throw new global::System.ArgumentNullException("STAFF_NAME");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(STAFF_NAME));
            }
            if ((PHONE_NO == null)) {
                throw new global::System.ArgumentNullException("PHONE_NO");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(PHONE_NO));
            }
            if ((DEPARTMENT_NAME == null)) {
                throw new global::System.ArgumentNullException("DEPARTMENT_NAME");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(DEPARTMENT_NAME));
            }
            if ((STAFF_DESIGNATION == null)) {
                throw new global::System.ArgumentNullException("STAFF_DESIGNATION");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(STAFF_DESIGNATION));
            }
            if ((SHIFT_TIMINGS == null)) {
                throw new global::System.ArgumentNullException("SHIFT_TIMINGS");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(SHIFT_TIMINGS));
            }
            this.Adapter.InsertCommand.Parameters[5].Value = ((System.DateTime)(JOINING_DATE));
            this.Adapter.InsertCommand.Parameters[6].Value = ((decimal)(SALARY));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string STAFF_NAME, 
                    string PHONE_NO, 
                    string DEPARTMENT_NAME, 
                    string STAFF_DESIGNATION, 
                    string SHIFT_TIMINGS, 
                    System.DateTime JOINING_DATE, 
                    decimal SALARY, 
                    int Original_STAFF_ID, 
                    string Original_STAFF_NAME, 
                    string Original_PHONE_NO, 
                    string Original_DEPARTMENT_NAME, 
                    string Original_STAFF_DESIGNATION, 
                    string Original_SHIFT_TIMINGS, 
                    System.DateTime Original_JOINING_DATE, 
                    decimal Original_SALARY, 
                    int STAFF_ID) {
            if ((STAFF_NAME == null)) {
                throw new global::System.ArgumentNullException("STAFF_NAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(STAFF_NAME));
            }
            if ((PHONE_NO == null)) {
                throw new global::System.ArgumentNullException("PHONE_NO");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(PHONE_NO));
            }
            if ((DEPARTMENT_NAME == null)) {
                throw new global::System.ArgumentNullException("DEPARTMENT_NAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(DEPARTMENT_NAME));
            }
            if ((STAFF_DESIGNATION == null)) {
                throw new global::System.ArgumentNullException("STAFF_DESIGNATION");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(STAFF_DESIGNATION));
            }
            if ((SHIFT_TIMINGS == null)) {
                throw new global::System.ArgumentNullException("SHIFT_TIMINGS");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(SHIFT_TIMINGS));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((System.DateTime)(JOINING_DATE));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((decimal)(SALARY));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_STAFF_ID));
            if ((Original_STAFF_NAME == null)) {
                throw new global::System.ArgumentNullException("Original_STAFF_NAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_STAFF_NAME));
            }
            if ((Original_PHONE_NO == null)) {
                throw new global::System.ArgumentNullException("Original_PHONE_NO");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_PHONE_NO));
            }
            if ((Original_DEPARTMENT_NAME == null)) {
                throw new global::System.ArgumentNullException("Original_DEPARTMENT_NAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_DEPARTMENT_NAME));
            }
            if ((Original_STAFF_DESIGNATION == null)) {
                throw new global::System.ArgumentNullException("Original_STAFF_DESIGNATION");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_STAFF_DESIGNATION));
            }
            if ((Original_SHIFT_TIMINGS == null)) {
                throw new global::System.ArgumentNullException("Original_SHIFT_TIMINGS");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_SHIFT_TIMINGS));
            }
            this.Adapter.UpdateCommand.Parameters[13].Value = ((System.DateTime)(Original_JOINING_DATE));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((decimal)(Original_SALARY));
            this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(STAFF_ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string STAFF_NAME, string PHONE_NO, string DEPARTMENT_NAME, string STAFF_DESIGNATION, string SHIFT_TIMINGS, System.DateTime JOINING_DATE, decimal SALARY, int Original_STAFF_ID, string Original_STAFF_NAME, string Original_PHONE_NO, string Original_DEPARTMENT_NAME, string Original_STAFF_DESIGNATION, string Original_SHIFT_TIMINGS, System.DateTime Original_JOINING_DATE, decimal Original_SALARY) {
            return this.Update(STAFF_NAME, PHONE_NO, DEPARTMENT_NAME, STAFF_DESIGNATION, SHIFT_TIMINGS, JOINING_DATE, SALARY, Original_STAFF_ID, Original_STAFF_NAME, Original_PHONE_NO, Original_DEPARTMENT_NAME, Original_STAFF_DESIGNATION, Original_SHIFT_TIMINGS, Original_JOINING_DATE, Original_SALARY, Original_STAFF_ID);
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private BILLING_DETAILSTableAdapter _bILLING_DETAILSTableAdapter;
        
        private DOCTOR_DETAILSTableAdapter _dOCTOR_DETAILSTableAdapter;
        
        private PATIENT_DETAILSTableAdapter _pATIENT_DETAILSTableAdapter;
        
        private PATIENTDETAILSTableAdapter _pATIENTDETAILSTableAdapter;
        
        private POST_OPERATIONTableAdapter _pOST_OPERATIONTableAdapter;
        
        private PRE_OPERATIONTableAdapter _pRE_OPERATIONTableAdapter;
        
        private STAFF_DETAILSTableAdapter _sTAFF_DETAILSTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public BILLING_DETAILSTableAdapter BILLING_DETAILSTableAdapter {
            get {
                return this._bILLING_DETAILSTableAdapter;
            }
            set {
                this._bILLING_DETAILSTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public DOCTOR_DETAILSTableAdapter DOCTOR_DETAILSTableAdapter {
            get {
                return this._dOCTOR_DETAILSTableAdapter;
            }
            set {
                this._dOCTOR_DETAILSTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public PATIENT_DETAILSTableAdapter PATIENT_DETAILSTableAdapter {
            get {
                return this._pATIENT_DETAILSTableAdapter;
            }
            set {
                this._pATIENT_DETAILSTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public PATIENTDETAILSTableAdapter PATIENTDETAILSTableAdapter {
            get {
                return this._pATIENTDETAILSTableAdapter;
            }
            set {
                this._pATIENTDETAILSTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public POST_OPERATIONTableAdapter POST_OPERATIONTableAdapter {
            get {
                return this._pOST_OPERATIONTableAdapter;
            }
            set {
                this._pOST_OPERATIONTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public PRE_OPERATIONTableAdapter PRE_OPERATIONTableAdapter {
            get {
                return this._pRE_OPERATIONTableAdapter;
            }
            set {
                this._pRE_OPERATIONTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public STAFF_DETAILSTableAdapter STAFF_DETAILSTableAdapter {
            get {
                return this._sTAFF_DETAILSTableAdapter;
            }
            set {
                this._sTAFF_DETAILSTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._bILLING_DETAILSTableAdapter != null) 
                            && (this._bILLING_DETAILSTableAdapter.Connection != null))) {
                    return this._bILLING_DETAILSTableAdapter.Connection;
                }
                if (((this._dOCTOR_DETAILSTableAdapter != null) 
                            && (this._dOCTOR_DETAILSTableAdapter.Connection != null))) {
                    return this._dOCTOR_DETAILSTableAdapter.Connection;
                }
                if (((this._pATIENT_DETAILSTableAdapter != null) 
                            && (this._pATIENT_DETAILSTableAdapter.Connection != null))) {
                    return this._pATIENT_DETAILSTableAdapter.Connection;
                }
                if (((this._pATIENTDETAILSTableAdapter != null) 
                            && (this._pATIENTDETAILSTableAdapter.Connection != null))) {
                    return this._pATIENTDETAILSTableAdapter.Connection;
                }
                if (((this._pOST_OPERATIONTableAdapter != null) 
                            && (this._pOST_OPERATIONTableAdapter.Connection != null))) {
                    return this._pOST_OPERATIONTableAdapter.Connection;
                }
                if (((this._pRE_OPERATIONTableAdapter != null) 
                            && (this._pRE_OPERATIONTableAdapter.Connection != null))) {
                    return this._pRE_OPERATIONTableAdapter.Connection;
                }
                if (((this._sTAFF_DETAILSTableAdapter != null) 
                            && (this._sTAFF_DETAILSTableAdapter.Connection != null))) {
                    return this._sTAFF_DETAILSTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._bILLING_DETAILSTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._dOCTOR_DETAILSTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._pATIENT_DETAILSTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._pATIENTDETAILSTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._pOST_OPERATIONTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._pRE_OPERATIONTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._sTAFF_DETAILSTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(OPERATION_THEATREDataSet1 dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._pATIENT_DETAILSTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.PATIENT_DETAILS.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._pATIENT_DETAILSTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._pOST_OPERATIONTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.POST_OPERATION.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._pOST_OPERATIONTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._sTAFF_DETAILSTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.STAFF_DETAILS.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._sTAFF_DETAILSTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._pRE_OPERATIONTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.PRE_OPERATION.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._pRE_OPERATIONTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._bILLING_DETAILSTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.BILLING_DETAILS.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._bILLING_DETAILSTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._dOCTOR_DETAILSTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.DOCTOR_DETAILS.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._dOCTOR_DETAILSTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._pATIENTDETAILSTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.PATIENTDETAILS.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._pATIENTDETAILSTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(OPERATION_THEATREDataSet1 dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._pATIENT_DETAILSTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.PATIENT_DETAILS.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._pATIENT_DETAILSTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._pOST_OPERATIONTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.POST_OPERATION.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._pOST_OPERATIONTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._sTAFF_DETAILSTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.STAFF_DETAILS.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._sTAFF_DETAILSTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._pRE_OPERATIONTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.PRE_OPERATION.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._pRE_OPERATIONTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._bILLING_DETAILSTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.BILLING_DETAILS.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._bILLING_DETAILSTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._dOCTOR_DETAILSTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.DOCTOR_DETAILS.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._dOCTOR_DETAILSTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._pATIENTDETAILSTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.PATIENTDETAILS.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._pATIENTDETAILSTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(OPERATION_THEATREDataSet1 dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._pATIENTDETAILSTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.PATIENTDETAILS.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._pATIENTDETAILSTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._dOCTOR_DETAILSTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.DOCTOR_DETAILS.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._dOCTOR_DETAILSTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._bILLING_DETAILSTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.BILLING_DETAILS.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._bILLING_DETAILSTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._pRE_OPERATIONTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.PRE_OPERATION.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._pRE_OPERATIONTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._sTAFF_DETAILSTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.STAFF_DETAILS.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._sTAFF_DETAILSTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._pOST_OPERATIONTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.POST_OPERATION.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._pOST_OPERATIONTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._pATIENT_DETAILSTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.PATIENT_DETAILS.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._pATIENT_DETAILSTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(OPERATION_THEATREDataSet1 dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._bILLING_DETAILSTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._bILLING_DETAILSTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._dOCTOR_DETAILSTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._dOCTOR_DETAILSTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._pATIENT_DETAILSTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._pATIENT_DETAILSTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._pATIENTDETAILSTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._pATIENTDETAILSTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._pOST_OPERATIONTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._pOST_OPERATIONTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._pRE_OPERATIONTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._pRE_OPERATIONTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._sTAFF_DETAILSTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._sTAFF_DETAILSTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._bILLING_DETAILSTableAdapter != null)) {
                    revertConnections.Add(this._bILLING_DETAILSTableAdapter, this._bILLING_DETAILSTableAdapter.Connection);
                    this._bILLING_DETAILSTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._bILLING_DETAILSTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._bILLING_DETAILSTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._bILLING_DETAILSTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._bILLING_DETAILSTableAdapter.Adapter);
                    }
                }
                if ((this._dOCTOR_DETAILSTableAdapter != null)) {
                    revertConnections.Add(this._dOCTOR_DETAILSTableAdapter, this._dOCTOR_DETAILSTableAdapter.Connection);
                    this._dOCTOR_DETAILSTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._dOCTOR_DETAILSTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._dOCTOR_DETAILSTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._dOCTOR_DETAILSTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._dOCTOR_DETAILSTableAdapter.Adapter);
                    }
                }
                if ((this._pATIENT_DETAILSTableAdapter != null)) {
                    revertConnections.Add(this._pATIENT_DETAILSTableAdapter, this._pATIENT_DETAILSTableAdapter.Connection);
                    this._pATIENT_DETAILSTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._pATIENT_DETAILSTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._pATIENT_DETAILSTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._pATIENT_DETAILSTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._pATIENT_DETAILSTableAdapter.Adapter);
                    }
                }
                if ((this._pATIENTDETAILSTableAdapter != null)) {
                    revertConnections.Add(this._pATIENTDETAILSTableAdapter, this._pATIENTDETAILSTableAdapter.Connection);
                    this._pATIENTDETAILSTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._pATIENTDETAILSTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._pATIENTDETAILSTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._pATIENTDETAILSTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._pATIENTDETAILSTableAdapter.Adapter);
                    }
                }
                if ((this._pOST_OPERATIONTableAdapter != null)) {
                    revertConnections.Add(this._pOST_OPERATIONTableAdapter, this._pOST_OPERATIONTableAdapter.Connection);
                    this._pOST_OPERATIONTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._pOST_OPERATIONTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._pOST_OPERATIONTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._pOST_OPERATIONTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._pOST_OPERATIONTableAdapter.Adapter);
                    }
                }
                if ((this._pRE_OPERATIONTableAdapter != null)) {
                    revertConnections.Add(this._pRE_OPERATIONTableAdapter, this._pRE_OPERATIONTableAdapter.Connection);
                    this._pRE_OPERATIONTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._pRE_OPERATIONTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._pRE_OPERATIONTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._pRE_OPERATIONTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._pRE_OPERATIONTableAdapter.Adapter);
                    }
                }
                if ((this._sTAFF_DETAILSTableAdapter != null)) {
                    revertConnections.Add(this._sTAFF_DETAILSTableAdapter, this._sTAFF_DETAILSTableAdapter.Connection);
                    this._sTAFF_DETAILSTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._sTAFF_DETAILSTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._sTAFF_DETAILSTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._sTAFF_DETAILSTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._sTAFF_DETAILSTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._bILLING_DETAILSTableAdapter != null)) {
                    this._bILLING_DETAILSTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._bILLING_DETAILSTableAdapter]));
                    this._bILLING_DETAILSTableAdapter.Transaction = null;
                }
                if ((this._dOCTOR_DETAILSTableAdapter != null)) {
                    this._dOCTOR_DETAILSTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._dOCTOR_DETAILSTableAdapter]));
                    this._dOCTOR_DETAILSTableAdapter.Transaction = null;
                }
                if ((this._pATIENT_DETAILSTableAdapter != null)) {
                    this._pATIENT_DETAILSTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._pATIENT_DETAILSTableAdapter]));
                    this._pATIENT_DETAILSTableAdapter.Transaction = null;
                }
                if ((this._pATIENTDETAILSTableAdapter != null)) {
                    this._pATIENTDETAILSTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._pATIENTDETAILSTableAdapter]));
                    this._pATIENTDETAILSTableAdapter.Transaction = null;
                }
                if ((this._pOST_OPERATIONTableAdapter != null)) {
                    this._pOST_OPERATIONTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._pOST_OPERATIONTableAdapter]));
                    this._pOST_OPERATIONTableAdapter.Transaction = null;
                }
                if ((this._pRE_OPERATIONTableAdapter != null)) {
                    this._pRE_OPERATIONTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._pRE_OPERATIONTableAdapter]));
                    this._pRE_OPERATIONTableAdapter.Transaction = null;
                }
                if ((this._sTAFF_DETAILSTableAdapter != null)) {
                    this._sTAFF_DETAILSTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._sTAFF_DETAILSTableAdapter]));
                    this._sTAFF_DETAILSTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591